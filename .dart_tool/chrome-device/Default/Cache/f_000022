define(['dart_sdk', 'packages/pointycastle/stream/salsa20.dart', 'packages/bitcoins/chaincfg/chaincfg.dart', 'packages/hash/hash.dart', 'packages/bs58/bs58.dart', 'packages/pointycastle/src/utils.dart'], (function load__packages__bitcoins__txrules__txrules_dart(dart_sdk, packages__pointycastle__stream__salsa20$46dart, packages__bitcoins__chaincfg__chaincfg$46dart, packages__hash__hash$46dart, packages__bs58__bs58$46dart, packages__pointycastle__src__utils$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const api = packages__pointycastle__stream__salsa20$46dart.ecc__api;
  const secp256k1 = packages__pointycastle__stream__salsa20$46dart.ecc__curves__secp256k1;
  const ecdsa_signer = packages__pointycastle__stream__salsa20$46dart.signers__ecdsa_signer;
  const hmac = packages__pointycastle__stream__salsa20$46dart.macs__hmac;
  const sha256 = packages__pointycastle__stream__salsa20$46dart.digests__sha256;
  const api$ = packages__pointycastle__stream__salsa20$46dart.api;
  const chaincfg = packages__bitcoins__chaincfg__chaincfg$46dart.chaincfg__chaincfg;
  const hash = packages__hash__hash$46dart.hash;
  const bs58 = packages__bs58__bs58$46dart.bs58;
  const utils = packages__pointycastle__src__utils$46dart.src__utils;
  var txrules = Object.create(dart.library);
  var wallet = Object.create(dart.library);
  var txhelpers = Object.create(dart.library);
  var helpers = Object.create(dart.library);
  var txsizes = Object.create(dart.library);
  var hdkeychain = Object.create(dart.library);
  var txscript = Object.create(dart.library);
  var transaction = Object.create(dart.library);
  var chainhash = Object.create(dart.library);
  var base58check = Object.create(dart.library);
  var utils$ = Object.create(dart.library);
  var $isEmpty = dartx.isEmpty;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $modulo = dartx['%'];
  var $leftShift = dartx['<<'];
  var $length = dartx.length;
  var $buffer = dartx.buffer;
  var $asUint8List = dartx.asUint8List;
  var $add = dartx.add;
  var $ceil = dartx.ceil;
  var $setUint8 = dartx.setUint8;
  var $setUint32 = dartx.setUint32;
  var $truncate = dartx.truncate;
  var $sublist = dartx.sublist;
  var $codeUnits = dartx.codeUnits;
  var $getUint8 = dartx.getUint8;
  var $lengthInBytes = dartx.lengthInBytes;
  var $getUint16 = dartx.getUint16;
  var $rightShift = dartx['>>'];
  var $getUint32 = dartx.getUint32;
  var $join = dartx.join;
  var $toString = dartx.toString;
  var $toList = dartx.toList;
  var $addAll = dartx.addAll;
  var $clear = dartx.clear;
  var $removeWhere = dartx.removeWhere;
  var $insert = dartx.insert;
  var $isNotEmpty = dartx.isNotEmpty;
  var $setUint16 = dartx.setUint16;
  var $getUint64 = dartx.getUint64;
  var $setUint64 = dartx.setUint64;
  var $setRange = dartx.setRange;
  var $getRange = dartx.getRange;
  var $reversed = dartx.reversed;
  var $toLowerCase = dartx.toLowerCase;
  var $toRadixString = dartx.toRadixString;
  var $padLeft = dartx.padLeft;
  var $substring = dartx.substring;
  var $startsWith = dartx.startsWith;
  var $isEven = dartx.isEven;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    ECPrivateKeyL: () => (T.ECPrivateKeyL = dart.constFn(dart.legacy(api.ECPrivateKey)))(),
    IdentityMapOfStringL$ECPrivateKeyL: () => (T.IdentityMapOfStringL$ECPrivateKeyL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ECPrivateKeyL())))(),
    AddressInfoL: () => (T.AddressInfoL = dart.constFn(dart.legacy(wallet.AddressInfo)))(),
    IdentityMapOfStringL$AddressInfoL: () => (T.IdentityMapOfStringL$AddressInfoL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.AddressInfoL())))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    AccountDataL: () => (T.AccountDataL = dart.constFn(dart.legacy(wallet.AccountData)))(),
    IdentityMapOfintL$AccountDataL: () => (T.IdentityMapOfintL$AccountDataL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.AccountDataL())))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    TxOutL: () => (T.TxOutL = dart.constFn(dart.legacy(transaction.TxOut)))(),
    JSArrayOfTxOutL: () => (T.JSArrayOfTxOutL = dart.constFn(_interceptors.JSArray$(T.TxOutL())))(),
    TransactionDestinationL: () => (T.TransactionDestinationL = dart.constFn(dart.legacy(txhelpers.TransactionDestination)))(),
    JSArrayOfTransactionDestinationL: () => (T.JSArrayOfTransactionDestinationL = dart.constFn(_interceptors.JSArray$(T.TransactionDestinationL())))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    KeyClosureRespL: () => (T.KeyClosureRespL = dart.constFn(dart.legacy(txscript.KeyClosureResp)))(),
    AddressL: () => (T.AddressL = dart.constFn(dart.legacy(utils$.Address)))(),
    AddressLToKeyClosureRespL: () => (T.AddressLToKeyClosureRespL = dart.constFn(dart.fnType(T.KeyClosureRespL(), [T.AddressL()])))(),
    AddressLToUint8ListL: () => (T.AddressLToUint8ListL = dart.constFn(dart.fnType(T.Uint8ListL(), [T.AddressL()])))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    ParsedOpcodeL: () => (T.ParsedOpcodeL = dart.constFn(dart.legacy(txscript.ParsedOpcode)))(),
    JSArrayOfParsedOpcodeL: () => (T.JSArrayOfParsedOpcodeL = dart.constFn(_interceptors.JSArray$(T.ParsedOpcodeL())))(),
    ParsedOpcodeLToboolL: () => (T.ParsedOpcodeLToboolL = dart.constFn(dart.fnType(T.boolL(), [T.ParsedOpcodeL()])))(),
    PrivateKeyL: () => (T.PrivateKeyL = dart.constFn(dart.legacy(api$.PrivateKey)))(),
    PrivateKeyParameterOfPrivateKeyL: () => (T.PrivateKeyParameterOfPrivateKeyL = dart.constFn(api$.PrivateKeyParameter$(T.PrivateKeyL())))(),
    ECSignatureL: () => (T.ECSignatureL = dart.constFn(dart.legacy(api.ECSignature)))(),
    JSArrayOfUint8ListL: () => (T.JSArrayOfUint8ListL = dart.constFn(_interceptors.JSArray$(T.Uint8ListL())))(),
    ListOfAddressL: () => (T.ListOfAddressL = dart.constFn(core.List$(T.AddressL())))(),
    ListLOfAddressL: () => (T.ListLOfAddressL = dart.constFn(dart.legacy(T.ListOfAddressL())))(),
    AddressPubKeyHashL: () => (T.AddressPubKeyHashL = dart.constFn(dart.legacy(utils$.AddressPubKeyHash)))(),
    AddressScriptHashL: () => (T.AddressScriptHashL = dart.constFn(dart.legacy(utils$.AddressScriptHash)))(),
    AddressWitnessPubKeyHashL: () => (T.AddressWitnessPubKeyHashL = dart.constFn(dart.legacy(utils$.AddressWitnessPubKeyHash)))(),
    JSArrayOfAddressL: () => (T.JSArrayOfAddressL = dart.constFn(_interceptors.JSArray$(T.AddressL())))(),
    OpCodeL: () => (T.OpCodeL = dart.constFn(dart.legacy(txscript.OpCode)))(),
    IdentityMapOfintL$OpCodeL: () => (T.IdentityMapOfintL$OpCodeL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.OpCodeL())))(),
    IdentityMapOfStringL$StringL: () => (T.IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.StringL())))(),
    UtxoL: () => (T.UtxoL = dart.constFn(dart.legacy(transaction.Utxo)))(),
    JSArrayOfUtxoL: () => (T.JSArrayOfUtxoL = dart.constFn(_interceptors.JSArray$(T.UtxoL())))(),
    TxInL: () => (T.TxInL = dart.constFn(dart.legacy(transaction.TxIn)))(),
    JSArrayOfTxInL: () => (T.JSArrayOfTxInL = dart.constFn(_interceptors.JSArray$(T.TxInL())))(),
    AmountL: () => (T.AmountL = dart.constFn(dart.legacy(utils$.Amount)))(),
    JSArrayOfAmountL: () => (T.JSArrayOfAmountL = dart.constFn(_interceptors.JSArray$(T.AmountL())))(),
    InputDetailL: () => (T.InputDetailL = dart.constFn(dart.legacy(transaction.InputDetail)))(),
    AmountLToInputDetailL: () => (T.AmountLToInputDetailL = dart.constFn(dart.fnType(T.InputDetailL(), [T.AmountL()])))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    BigIntL: () => (T.BigIntL = dart.constFn(dart.legacy(core.BigInt)))(),
    VoidToStringL: () => (T.VoidToStringL = dart.constFn(dart.fnType(T.StringL(), [])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:bitcoins/wallet/wallet.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/bitcoins-1.0.5/lib/wallet/wallet_btc.dart",
    "package:bitcoins/txhelpers/txhelpers.dart",
    "package:bitcoins/hdkeychain/hdkeychain.dart",
    "package:bitcoins/txscript/txscript.dart",
    "package:bitcoins/transaction/transaction.dart",
    "package:bitcoins/chainhash/chainhash.dart",
    "package:bitcoins/base58check/base58check.dart",
    "package:bitcoins/utils/utils.dart"
  ];
  txrules.feeForSerializeSize = function feeForSerializeSize(relayFeePerKb, txSerializeSize) {
    let relay = relayFeePerKb.toCoin();
    let fee = relay['*'](core._BigIntImpl.from(txSerializeSize))['~/'](core._BigIntImpl.from(1000.0));
    if (dart.equals(fee, core.BigInt.zero) && dart.test(relay['>'](core.BigInt.zero))) {
      fee = relay;
    }
    let max = core._BigIntImpl.from(210000000);
    if (dart.test(fee['<'](core.BigInt.zero)) || dart.test(fee['>'](max))) {
      fee = max;
    }
    return new utils$.Amount.new(fee);
  };
  txrules.isDustAmount = function isDustAmount(amount, relayFeePerKb) {
    return amount.toCoin()['<'](relayFeePerKb.toCoin());
  };
  dart.defineLazy(txrules, {
    /*txrules.DEFAULT_RELAY_FEE_PER_KB*/get DEFAULT_RELAY_FEE_PER_KB() {
      return 1000;
    }
  }, true);
  var account$ = dart.privateName(wallet, "AddressInfo.account");
  var branch$ = dart.privateName(wallet, "AddressInfo.branch");
  var index$ = dart.privateName(wallet, "AddressInfo.index");
  wallet.AddressInfo = class AddressInfo extends core.Object {
    get account() {
      return this[account$];
    }
    set account(value) {
      super.account = value;
    }
    get branch() {
      return this[branch$];
    }
    set branch(value) {
      super.branch = value;
    }
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
  };
  (wallet.AddressInfo.new = function(opts) {
    let account = opts && 'account' in opts ? opts.account : null;
    let branch = opts && 'branch' in opts ? opts.branch : null;
    let index = opts && 'index' in opts ? opts.index : null;
    this[account$] = account;
    this[branch$] = branch;
    this[index$] = index;
    ;
  }).prototype = wallet.AddressInfo.prototype;
  dart.addTypeTests(wallet.AddressInfo);
  dart.addTypeCaches(wallet.AddressInfo);
  dart.setLibraryUri(wallet.AddressInfo, I[0]);
  dart.setFieldSignature(wallet.AddressInfo, () => ({
    __proto__: dart.getFields(wallet.AddressInfo.__proto__),
    account: dart.finalFieldType(dart.legacy(core.int)),
    branch: dart.finalFieldType(dart.legacy(core.int)),
    index: dart.finalFieldType(dart.legacy(core.int))
  }));
  var _coinTypeLegacyKeyPriv = dart.privateName(wallet, "_coinTypeLegacyKeyPriv");
  var _returnedPrivKeys = dart.privateName(wallet, "_returnedPrivKeys");
  var _net = dart.privateName(wallet, "_net");
  var _cache = dart.privateName(wallet, "_cache");
  var _init = dart.privateName(wallet, "_init");
  wallet.AddressManager = class AddressManager extends core.Object {
    [_init](seed) {
      let root = hdkeychain.ExtendedKey.fromSeed(seed);
      this[_coinTypeLegacyKeyPriv] = wallet._deriveCoinTypeKey(root, this[_net].legacyCoinType);
    }
    putChainedAddress(address, account, branch, index) {
      return this[_cache].putAddressInfo(address, account, branch, index);
    }
    fetchAddress(address) {
      return this[_cache].getAddressInfo(address);
    }
    getAccountProperties(account) {
      let t0;
      t0 = this[_cache].getAccountProperties(account);
      return t0 == null ? new wallet.AccountProperties.new() : t0;
    }
    deriveKeyFromPath(account, branch, index, isPrivate) {
      let accKey = this.getAccountKey(account);
      if (!dart.test(isPrivate)) {
        accKey = accKey.neuter();
      }
      return accKey.child(branch).child(index);
    }
    privateKey(addr) {
      let t0, t0$;
      let address = addr.encode();
      if (dart.test((t0$ = (t0 = this[_returnedPrivKeys], t0 == null ? null : t0[$isEmpty]), t0$ == null ? true : t0$))) {
        this[_returnedPrivKeys] = new (T.IdentityMapOfStringL$ECPrivateKeyL()).new();
      }
      if (dart.test(this[_returnedPrivKeys][$containsKey](address))) {
        return this[_returnedPrivKeys][$_get](address);
      }
      let info = this.fetchAddress(address);
      let xpriv = this.deriveKeyFromPath(info.account, info.branch, info.index, true);
      let key = xpriv.ECPrivKey();
      this[_returnedPrivKeys][$_set](address, key);
      return key;
    }
    getAccountKey(account) {
      let acctKeyLegacyPriv = wallet._deriveAccountKey(this[_coinTypeLegacyKeyPriv], account);
      return acctKeyLegacyPriv;
    }
  };
  (wallet.AddressManager.new = function(opts) {
    let t0;
    let seed = opts && 'seed' in opts ? opts.seed : null;
    let net = opts && 'net' in opts ? opts.net : null;
    let cache = opts && 'cache' in opts ? opts.cache : null;
    this[_coinTypeLegacyKeyPriv] = null;
    this[_returnedPrivKeys] = null;
    this[_net] = null;
    this[_cache] = null;
    this[_net] = net;
    this[_cache] = (t0 = cache, t0 == null ? new wallet.DefaultAccountCache.new() : t0);
    this[_init](seed);
  }).prototype = wallet.AddressManager.prototype;
  dart.addTypeTests(wallet.AddressManager);
  dart.addTypeCaches(wallet.AddressManager);
  dart.setMethodSignature(wallet.AddressManager, () => ({
    __proto__: dart.getMethods(wallet.AddressManager.__proto__),
    [_init]: dart.fnType(dart.void, [dart.legacy(typed_data.Uint8List)]),
    putChainedAddress: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    fetchAddress: dart.fnType(dart.legacy(wallet.AddressInfo), [dart.legacy(core.String)]),
    getAccountProperties: dart.fnType(dart.legacy(wallet.AccountProperties), [dart.legacy(core.int)]),
    deriveKeyFromPath: dart.fnType(dart.legacy(hdkeychain.ExtendedKey), [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.bool)]),
    privateKey: dart.fnType(dart.legacy(api.ECPrivateKey), [dart.legacy(utils$.Address)]),
    getAccountKey: dart.fnType(dart.legacy(hdkeychain.ExtendedKey), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(wallet.AddressManager, I[0]);
  dart.setFieldSignature(wallet.AddressManager, () => ({
    __proto__: dart.getFields(wallet.AddressManager.__proto__),
    [_coinTypeLegacyKeyPriv]: dart.fieldType(dart.legacy(hdkeychain.ExtendedKey)),
    [_returnedPrivKeys]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(api.ECPrivateKey)))),
    [_net]: dart.fieldType(dart.legacy(chaincfg.Params)),
    [_cache]: dart.fieldType(dart.legacy(wallet.AccountCache))
  }));
  var xpub$ = dart.privateName(wallet, "AccountData.xpub");
  var albExternal$ = dart.privateName(wallet, "AccountData.albExternal");
  var albInternal$ = dart.privateName(wallet, "AccountData.albInternal");
  wallet.AccountData = class AccountData extends core.Object {
    get xpub() {
      return this[xpub$];
    }
    set xpub(value) {
      super.xpub = value;
    }
    get albExternal() {
      return this[albExternal$];
    }
    set albExternal(value) {
      super.albExternal = value;
    }
    get albInternal() {
      return this[albInternal$];
    }
    set albInternal(value) {
      super.albInternal = value;
    }
  };
  (wallet.AccountData.new = function(opts) {
    let xpub = opts && 'xpub' in opts ? opts.xpub : null;
    let albExternal = opts && 'albExternal' in opts ? opts.albExternal : null;
    let albInternal = opts && 'albInternal' in opts ? opts.albInternal : null;
    this[xpub$] = xpub;
    this[albExternal$] = albExternal;
    this[albInternal$] = albInternal;
    ;
  }).prototype = wallet.AccountData.prototype;
  dart.addTypeTests(wallet.AccountData);
  dart.addTypeCaches(wallet.AccountData);
  dart.setLibraryUri(wallet.AccountData, I[0]);
  dart.setFieldSignature(wallet.AccountData, () => ({
    __proto__: dart.getFields(wallet.AccountData.__proto__),
    xpub: dart.finalFieldType(dart.legacy(hdkeychain.ExtendedKey)),
    albExternal: dart.finalFieldType(dart.legacy(wallet.AddressBuffer)),
    albInternal: dart.finalFieldType(dart.legacy(wallet.AddressBuffer))
  }));
  var branchXpub$ = dart.privateName(wallet, "AddressBuffer.branchXpub");
  var lastUsed$ = dart.privateName(wallet, "AddressBuffer.lastUsed");
  var cursor$ = dart.privateName(wallet, "AddressBuffer.cursor");
  wallet.AddressBuffer = class AddressBuffer extends core.Object {
    get branchXpub() {
      return this[branchXpub$];
    }
    set branchXpub(value) {
      super.branchXpub = value;
    }
    get lastUsed() {
      return this[lastUsed$];
    }
    set lastUsed(value) {
      super.lastUsed = value;
    }
    get cursor() {
      return this[cursor$];
    }
    set cursor(value) {
      this[cursor$] = value;
    }
  };
  (wallet.AddressBuffer.new = function(opts) {
    let branchXpub = opts && 'branchXpub' in opts ? opts.branchXpub : null;
    let lastUsed = opts && 'lastUsed' in opts ? opts.lastUsed : null;
    let cursor = opts && 'cursor' in opts ? opts.cursor : null;
    this[branchXpub$] = branchXpub;
    this[lastUsed$] = lastUsed;
    this[cursor$] = cursor;
    ;
  }).prototype = wallet.AddressBuffer.prototype;
  dart.addTypeTests(wallet.AddressBuffer);
  dart.addTypeCaches(wallet.AddressBuffer);
  dart.setLibraryUri(wallet.AddressBuffer, I[0]);
  dart.setFieldSignature(wallet.AddressBuffer, () => ({
    __proto__: dart.getFields(wallet.AddressBuffer.__proto__),
    branchXpub: dart.finalFieldType(dart.legacy(hdkeychain.ExtendedKey)),
    lastUsed: dart.finalFieldType(dart.legacy(core.int)),
    cursor: dart.fieldType(dart.legacy(core.int))
  }));
  var _bucket = dart.privateName(wallet, "_bucket");
  wallet.DefaultAccountCache = class DefaultAccountCache extends core.Object {
    getAddressInfo(address) {
      let t0, t0$;
      if (!dart.test((t0$ = (t0 = this[_bucket], t0 == null ? null : t0[$containsKey](address)), t0$ == null ? false : t0$))) {
        return new wallet.AddressInfo.new({account: 0, branch: 0, index: 0});
      }
      return this[_bucket][$_get](address);
    }
    putAddressInfo(address, account, branch, index) {
      let t0, t0$, t0$0, t0$1;
      if (dart.test((t0$ = (t0 = this[_bucket], t0 == null ? null : t0[$containsKey](address)), t0$ == null ? false : t0$))) {
        return false;
      }
      index = index[$modulo]((1)[$leftShift](32 - 1));
      let info = new wallet.AddressInfo.new({account: account, branch: branch, index: index});
      if (dart.test((t0$1 = (t0$0 = this[_bucket], t0$0 == null ? null : t0$0[$isEmpty]), t0$1 == null ? true : t0$1))) {
        this[_bucket] = new (T.IdentityMapOfStringL$AddressInfoL()).new();
      }
      this[_bucket][$_set](address, info);
      return true;
    }
    getAccountProperties(account) {
      return new wallet.AccountProperties.new();
    }
  };
  (wallet.DefaultAccountCache.new = function() {
    this[_bucket] = null;
    ;
  }).prototype = wallet.DefaultAccountCache.prototype;
  dart.addTypeTests(wallet.DefaultAccountCache);
  dart.addTypeCaches(wallet.DefaultAccountCache);
  wallet.DefaultAccountCache[dart.implements] = () => [wallet.AccountCache];
  dart.setMethodSignature(wallet.DefaultAccountCache, () => ({
    __proto__: dart.getMethods(wallet.DefaultAccountCache.__proto__),
    getAddressInfo: dart.fnType(dart.legacy(wallet.AddressInfo), [dart.legacy(core.String)]),
    putAddressInfo: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    getAccountProperties: dart.fnType(dart.legacy(wallet.AccountProperties), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(wallet.DefaultAccountCache, I[0]);
  dart.setFieldSignature(wallet.DefaultAccountCache, () => ({
    __proto__: dart.getFields(wallet.DefaultAccountCache.__proto__),
    [_bucket]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(wallet.AddressInfo))))
  }));
  wallet.AccountCache = class AccountCache extends core.Object {};
  (wallet.AccountCache.new = function() {
    ;
  }).prototype = wallet.AccountCache.prototype;
  dart.addTypeTests(wallet.AccountCache);
  dart.addTypeCaches(wallet.AccountCache);
  dart.setLibraryUri(wallet.AccountCache, I[0]);
  var lastUsedExternalIndex$ = dart.privateName(wallet, "AccountProperties.lastUsedExternalIndex");
  var lastUsedInternalIndex$ = dart.privateName(wallet, "AccountProperties.lastUsedInternalIndex");
  var lastReturnedExternalIndex$ = dart.privateName(wallet, "AccountProperties.lastReturnedExternalIndex");
  var lastReturnedInternalIndex$ = dart.privateName(wallet, "AccountProperties.lastReturnedInternalIndex");
  wallet.AccountProperties = class AccountProperties extends core.Object {
    get lastUsedExternalIndex() {
      return this[lastUsedExternalIndex$];
    }
    set lastUsedExternalIndex(value) {
      super.lastUsedExternalIndex = value;
    }
    get lastUsedInternalIndex() {
      return this[lastUsedInternalIndex$];
    }
    set lastUsedInternalIndex(value) {
      super.lastUsedInternalIndex = value;
    }
    get lastReturnedExternalIndex() {
      return this[lastReturnedExternalIndex$];
    }
    set lastReturnedExternalIndex(value) {
      super.lastReturnedExternalIndex = value;
    }
    get lastReturnedInternalIndex() {
      return this[lastReturnedInternalIndex$];
    }
    set lastReturnedInternalIndex(value) {
      super.lastReturnedInternalIndex = value;
    }
  };
  (wallet.AccountProperties.new = function(opts) {
    let lastUsedExternalIndex = opts && 'lastUsedExternalIndex' in opts ? opts.lastUsedExternalIndex : null;
    let lastUsedInternalIndex = opts && 'lastUsedInternalIndex' in opts ? opts.lastUsedInternalIndex : null;
    let lastReturnedExternalIndex = opts && 'lastReturnedExternalIndex' in opts ? opts.lastReturnedExternalIndex : null;
    let lastReturnedInternalIndex = opts && 'lastReturnedInternalIndex' in opts ? opts.lastReturnedInternalIndex : null;
    this[lastUsedExternalIndex$] = lastUsedExternalIndex;
    this[lastUsedInternalIndex$] = lastUsedInternalIndex;
    this[lastReturnedExternalIndex$] = lastReturnedExternalIndex;
    this[lastReturnedInternalIndex$] = lastReturnedInternalIndex;
    ;
  }).prototype = wallet.AccountProperties.prototype;
  dart.addTypeTests(wallet.AccountProperties);
  dart.addTypeCaches(wallet.AccountProperties);
  dart.setLibraryUri(wallet.AccountProperties, I[0]);
  dart.setFieldSignature(wallet.AccountProperties, () => ({
    __proto__: dart.getFields(wallet.AccountProperties.__proto__),
    lastUsedExternalIndex: dart.finalFieldType(dart.legacy(core.int)),
    lastUsedInternalIndex: dart.finalFieldType(dart.legacy(core.int)),
    lastReturnedExternalIndex: dart.finalFieldType(dart.legacy(core.int)),
    lastReturnedInternalIndex: dart.finalFieldType(dart.legacy(core.int))
  }));
  var _manager = dart.privateName(wallet, "_manager");
  var _accountData = dart.privateName(wallet, "_accountData");
  var _store = dart.privateName(wallet, "_store");
  var _multipleAddress = dart.privateName(wallet, "_multipleAddress");
  var _addressReuse = dart.privateName(wallet, "_addressReuse");
  var _gapLimit = dart.privateName(wallet, "_gapLimit");
  var _getAccountData = dart.privateName(wallet, "_getAccountData");
  var _getAddressByChild = dart.privateName(wallet, "_getAddressByChild");
  var _nextAddress = dart.privateName(wallet, "_nextAddress");
  var _persistReturnedChild = dart.privateName(wallet, "_persistReturnedChild");
  var _unsignedTransaction = dart.privateName(wallet, "_unsignedTransaction");
  var _constructTransaction = dart.privateName(wallet, "_constructTransaction");
  wallet.WalletBTC = class WalletBTC extends core.Object {
    [_getAccountData](account) {
      let t0, t0$, t0$0, t0$1;
      if (dart.test(this[_accountData][$containsKey](account))) {
        return this[_accountData][$_get](account);
      }
      let pops = this[_manager].getAccountProperties(account);
      let pub = this[_manager].getAccountKey(account);
      let buf = new wallet.AccountData.new({xpub: pub, albExternal: new wallet.AddressBuffer.new({branchXpub: pub.child(0), lastUsed: (t0 = pops.lastUsedExternalIndex, t0 == null ? 0 : t0), cursor: (t0$ = pops.lastReturnedExternalIndex, t0$ == null ? 0 : t0$)}), albInternal: new wallet.AddressBuffer.new({branchXpub: pub.child(1), lastUsed: (t0$0 = pops.lastUsedInternalIndex, t0$0 == null ? 0 : t0$0), cursor: (t0$1 = pops.lastReturnedInternalIndex, t0$1 == null ? 0 : t0$1)})});
      this[_accountData][$_set](account, buf);
      return buf;
    }
    [_getAddressByChild](xpub, index = 0) {
      let key = xpub.child(index);
      return new utils$.AddressScriptHash.new({scriptHash: hdkeychain.hash160(_native_typed_data.NativeUint8List.fromList(txscript.payToAddrScript(new utils$.AddressWitnessPubKeyHash.new({hash: key.pubKeyHash, net: this[_net]})))), net: this[_net]});
    }
    getPubKey(account) {
      let pub = this[_manager].getAccountKey(account);
      return pub.toBase58(this[_net].hdPublicKeyID);
    }
    getAddress(account) {
      let buf = this[_getAccountData](account);
      return this[_getAddressByChild](buf.albExternal.branchXpub).encode();
    }
    [_nextAddress](account, branch, persist) {
      let t0;
      let buf = this[_getAccountData](account);
      if (buf == null) {
        dart.throw(new core.FormatException.new("no account " + dart.str(account)));
      }
      let alb = null;
      switch (branch) {
        case 0:
        {
          alb = buf.albExternal;
          break;
        }
        case 1:
        {
          alb = buf.albInternal;
          break;
        }
        default:
        {
          dart.throw(new core.FormatException.new("invalid branch=" + dart.str(branch)));
          break;
        }
      }
      if (dart.test(this[_addressReuse]) && dart.dtest(dart.dsend(dart.dload(alb, 'cursor'), '>=', [this[_gapLimit]]))) {
        dart.dput(alb, 'cursor', 0);
      }
      let childIndex = dart.dsend(dart.dload(alb, 'lastUsed'), '+', [dart.dload(alb, 'cursor')]);
      if (dart.dtest(dart.dsend(childIndex, '>=', [2147483648.0]))) {
        dart.throw(new core.FormatException.new("account " + dart.str(account) + " branch " + dart.str(branch) + " exhausted"));
      }
      let child = dart.dsend(dart.dload(alb, 'branchXpub'), 'child', [childIndex]);
      let addr = new utils$.AddressScriptHash.new({scriptHash: hdkeychain.hash160(_native_typed_data.NativeUint8List.fromList(txscript.payToAddrScript(new utils$.AddressWitnessPubKeyHash.new({hash: T.Uint8ListL().as(dart.dload(child, 'pubKeyHash')), net: this[_net]})))), net: this[_net]});
      persist(addr, account, branch, T.intL().as(childIndex));
      if (dart.test(this[_multipleAddress])) {
        t0 = alb;
        dart.dput(t0, 'cursor', dart.dsend(dart.dload(t0, 'cursor'), '+', [1]));
      }
      return addr;
    }
    [_persistReturnedChild](addr, account, branch, index) {
      this[_manager].putChainedAddress(addr.encode(), account, branch, index);
    }
    newExternalAddress(account) {
      return this[_nextAddress](account, 0, dart.bind(this, _persistReturnedChild));
    }
    newInternalAddress(account) {
      if (!dart.test(this[_multipleAddress])) {
        return this.newExternalAddress(account);
      }
      return this[_nextAddress](account, 1, dart.bind(this, _persistReturnedChild));
    }
    from(utxos) {
      let t0, t0$;
      if (dart.test((t0$ = (t0 = utxos, t0 == null ? null : t0[$isEmpty]), t0$ == null ? true : t0$))) {
        dart.throw(new core.FormatException.new("Utxos is Empty."));
      }
      for (let i = 0; i < dart.notNull(utxos[$length]); i = i + 1) {
        this[_store].put(utxos[$_get](i));
      }
      return this;
    }
    [_unsignedTransaction](account, outputs, relayFeePerKb, changeSource = null) {
      let sourceImpl = this[_store].makeInputSource();
      let inputSource = dart.bind(sourceImpl, 'selectInputs');
      changeSource == null ? changeSource = new txhelpers.P2PKHChangeSource.new({account: account, wallet: this}) : null;
      return transaction.unsignedTransaction(outputs, relayFeePerKb, inputSource, changeSource);
    }
    [_constructTransaction](account, amount, to, opts) {
      let spendAllFunds = opts && 'spendAllFunds' in opts ? opts.spendAllFunds : null;
      let rate = opts && 'rate' in opts ? opts.rate : null;
      let outputs = T.JSArrayOfTxOutL().of([]);
      let changeSource = null;
      if (dart.test(spendAllFunds)) {
        changeSource = new txhelpers.ChangeSource.new(to);
      } else {
        outputs = txhelpers.makeTxOutputs(T.JSArrayOfTransactionDestinationL().of([new txhelpers.TransactionDestination.new({address: to, amount: amount})]));
      }
      let fee = null;
      if (rate != null) {
        fee = new utils$.Amount.new(core._BigIntImpl.from(dart.notNull(rate) * 1000.0));
      }
      fee == null ? fee = new utils$.Amount.new(core._BigIntImpl.from(1000)) : null;
      return this[_unsignedTransaction](account, outputs, fee, changeSource);
    }
    transaction(account, amount, to, opts) {
      let spendAllFunds = opts && 'spendAllFunds' in opts ? opts.spendAllFunds : false;
      let rate = opts && 'rate' in opts ? opts.rate : null;
      let addr = utils$.decodeAddress(to);
      if (!dart.test(addr.isForNet(this[_net]))) {
        dart.throw(new core.FormatException.new("Address does not match environment"));
      }
      let authoredTx = this[_constructTransaction](account, new utils$.Amount.new(amount), addr, {spendAllFunds: T.boolL().as(spendAllFunds), rate: rate});
      let getKey = new txscript.KeyClosure.new(dart.fn(addr => new txscript.KeyClosureResp.new({key: this[_manager].privateKey(addr), compressed: true}), T.AddressLToKeyClosureRespL()));
      let getScript = new txscript.ScriptClosure.new(dart.fn(addr => {
        let info = this[_manager].fetchAddress(addr.encode());
        return this[_manager].deriveKeyFromPath(info.account, info.branch, info.index, true).pubKeyHash;
      }, T.AddressLToUint8ListL()));
      transaction.addAllInputScripts(authoredTx.tx, authoredTx.prevScripts, authoredTx.inputValues, this[_net], getKey, getScript);
      let txBuf = _native_typed_data.NativeByteData.new(authoredTx.tx.serializeSize());
      authoredTx.tx.serialize(txBuf);
      return utils$.bytesToHex(txBuf[$buffer][$asUint8List]());
    }
  };
  (wallet.WalletBTC.new = function(opts) {
    let t0, t0$;
    let seed = opts && 'seed' in opts ? opts.seed : null;
    let net = opts && 'net' in opts ? opts.net : null;
    let multipleAddress = opts && 'multipleAddress' in opts ? opts.multipleAddress : null;
    let addressReuse = opts && 'addressReuse' in opts ? opts.addressReuse : null;
    let gapLimit = opts && 'gapLimit' in opts ? opts.gapLimit : 20;
    let cache = opts && 'cache' in opts ? opts.cache : null;
    this[_manager] = null;
    this[_net] = null;
    this[_accountData] = new (T.IdentityMapOfintL$AccountDataL()).new();
    this[_store] = null;
    this[_multipleAddress] = null;
    this[_addressReuse] = null;
    this[_gapLimit] = null;
    this[_manager] = new wallet.AddressManager.new({seed: seed, net: net, cache: cache});
    this[_net] = net;
    this[_store] = new transaction.Store.new();
    this[_multipleAddress] = (t0 = multipleAddress, t0 == null ? false : t0);
    this[_addressReuse] = (t0$ = addressReuse, t0$ == null ? false : t0$);
    if (!(dart.notNull(gapLimit) > 0)) dart.assertFailed(null, I[1], 43, 12, "gapLimit > 0");
    this[_gapLimit] = gapLimit;
  }).prototype = wallet.WalletBTC.prototype;
  dart.addTypeTests(wallet.WalletBTC);
  dart.addTypeCaches(wallet.WalletBTC);
  dart.setMethodSignature(wallet.WalletBTC, () => ({
    __proto__: dart.getMethods(wallet.WalletBTC.__proto__),
    [_getAccountData]: dart.fnType(dart.legacy(wallet.AccountData), [dart.legacy(core.int)]),
    [_getAddressByChild]: dart.fnType(dart.legacy(utils$.Address), [dart.legacy(hdkeychain.ExtendedKey)], [dart.legacy(core.int)]),
    getPubKey: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    getAddress: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    [_nextAddress]: dart.fnType(dart.legacy(utils$.Address), [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(dart.fnType(dart.void, [dart.legacy(utils$.Address), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]))]),
    [_persistReturnedChild]: dart.fnType(dart.void, [dart.legacy(utils$.Address), dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
    newExternalAddress: dart.fnType(dart.legacy(utils$.Address), [dart.legacy(core.int)]),
    newInternalAddress: dart.fnType(dart.legacy(utils$.Address), [dart.legacy(core.int)]),
    from: dart.fnType(dart.legacy(wallet.WalletBTC), [dart.legacy(core.List$(dart.legacy(transaction.Utxo)))]),
    [_unsignedTransaction]: dart.fnType(dart.legacy(transaction.AuthoredTx), [dart.legacy(core.int), dart.legacy(core.List$(dart.legacy(transaction.TxOut))), dart.legacy(utils$.Amount)], [dart.legacy(txhelpers.ChangeSource)]),
    [_constructTransaction]: dart.fnType(dart.legacy(transaction.AuthoredTx), [dart.legacy(core.int), dart.legacy(utils$.Amount), dart.legacy(utils$.Address)], {rate: dart.legacy(core.int), spendAllFunds: dart.legacy(core.bool)}, {}),
    transaction: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int), dart.legacy(core.BigInt), dart.legacy(core.String)], {rate: dart.legacy(core.int), spendAllFunds: dart.dynamic}, {})
  }));
  dart.setLibraryUri(wallet.WalletBTC, I[0]);
  dart.setFieldSignature(wallet.WalletBTC, () => ({
    __proto__: dart.getFields(wallet.WalletBTC.__proto__),
    [_manager]: dart.fieldType(dart.legacy(wallet.AddressManager)),
    [_net]: dart.fieldType(dart.legacy(chaincfg.Params)),
    [_accountData]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(wallet.AccountData)))),
    [_store]: dart.fieldType(dart.legacy(transaction.Store)),
    [_multipleAddress]: dart.fieldType(dart.legacy(core.bool)),
    [_addressReuse]: dart.fieldType(dart.legacy(core.bool)),
    [_gapLimit]: dart.fieldType(dart.legacy(core.int))
  }));
  wallet._deriveAccountKey = function _deriveAccountKey(coinTypeKey, account) {
    if (dart.notNull(account) > 2147483646) {
      dart.throw(new core.FormatException.new("account " + dart.str(account)));
    }
    return coinTypeKey.child(dart.notNull(account) + 2147483648.0);
  };
  wallet._deriveCoinTypeKey = function _deriveCoinTypeKey(masterNode, coinType) {
    if (dart.notNull(coinType) > 2147483647) {
      dart.throw(new core.FormatException.new("coin type " + dart.str(coinType)));
    }
    let purpose = masterNode.child(49 + 2147483648.0);
    let coinTypeKey = purpose.child(dart.notNull(coinType) + 2147483648.0);
    return coinTypeKey;
  };
  dart.defineLazy(wallet, {
    /*wallet.MAX_COIN_TYPE*/get MAX_COIN_TYPE() {
      return 2147483647;
    },
    /*wallet.MAX_ACCOUNY_NUM*/get MAX_ACCOUNY_NUM() {
      return 2147483646;
    },
    /*wallet.DEFAULT_ACCOUNT_NUM*/get DEFAULT_ACCOUNT_NUM() {
      return 0;
    },
    /*wallet.EXTERNAL_BRANCH*/get EXTERNAL_BRANCH() {
      return 0;
    },
    /*wallet.INTERNAL_BRANCH*/get INTERNAL_BRANCH() {
      return 1;
    },
    /*wallet.DEFAULT_GAP_LIMIT*/get DEFAULT_GAP_LIMIT() {
      return 20;
    },
    /*wallet.GAP_POLICY_ERROR*/get GAP_POLICY_ERROR() {
      return 0;
    },
    /*wallet.GAP_POLICY_IGNORE*/get GAP_POLICY_IGNORE() {
      return 1;
    },
    /*wallet.GAP_POLICY_WRAP*/get GAP_POLICY_WRAP() {
      return 2;
    }
  }, true);
  var _hash = dart.privateName(txhelpers, "_hash");
  var _version = dart.privateName(txhelpers, "_version");
  txhelpers.ChangeSource = class ChangeSource extends core.Object {
    get hash() {
      return this[_hash];
    }
    get version() {
      return this[_version];
    }
    script() {
    }
    scriptSize() {
      return this[_hash][$length];
    }
  };
  (txhelpers.ChangeSource.new = function(addr) {
    this[_hash] = null;
    this[_version] = null;
    if (addr != null) {
      this[_hash] = txscript.payToAddrScript(addr);
    }
    this[_version] = 0;
  }).prototype = txhelpers.ChangeSource.prototype;
  dart.addTypeTests(txhelpers.ChangeSource);
  dart.addTypeCaches(txhelpers.ChangeSource);
  dart.setMethodSignature(txhelpers.ChangeSource, () => ({
    __proto__: dart.getMethods(txhelpers.ChangeSource.__proto__),
    script: dart.fnType(dart.void, []),
    scriptSize: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setGetterSignature(txhelpers.ChangeSource, () => ({
    __proto__: dart.getGetters(txhelpers.ChangeSource.__proto__),
    hash: dart.legacy(typed_data.Uint8List),
    version: dart.legacy(core.int)
  }));
  dart.setLibraryUri(txhelpers.ChangeSource, I[2]);
  dart.setFieldSignature(txhelpers.ChangeSource, () => ({
    __proto__: dart.getFields(txhelpers.ChangeSource.__proto__),
    [_hash]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_version]: dart.fieldType(dart.legacy(core.int))
  }));
  var account$0 = dart.privateName(txhelpers, "P2PKHChangeSource.account");
  var wallet$ = dart.privateName(txhelpers, "P2PKHChangeSource.wallet");
  txhelpers.P2PKHChangeSource = class P2PKHChangeSource extends txhelpers.ChangeSource {
    get account() {
      return this[account$0];
    }
    set account(value) {
      super.account = value;
    }
    get wallet() {
      return this[wallet$];
    }
    set wallet(value) {
      super.wallet = value;
    }
    script() {
      let changeAddress = this.wallet.newInternalAddress(this.account);
      this[_hash] = txscript.payToAddrScript(changeAddress);
      this[_version] = 0;
    }
    scriptSize() {
      return 25;
    }
  };
  (txhelpers.P2PKHChangeSource.new = function(opts) {
    let account = opts && 'account' in opts ? opts.account : null;
    let wallet = opts && 'wallet' in opts ? opts.wallet : null;
    this[account$0] = account;
    this[wallet$] = wallet;
    txhelpers.P2PKHChangeSource.__proto__.new.call(this, null);
    ;
  }).prototype = txhelpers.P2PKHChangeSource.prototype;
  dart.addTypeTests(txhelpers.P2PKHChangeSource);
  dart.addTypeCaches(txhelpers.P2PKHChangeSource);
  dart.setLibraryUri(txhelpers.P2PKHChangeSource, I[2]);
  dart.setFieldSignature(txhelpers.P2PKHChangeSource, () => ({
    __proto__: dart.getFields(txhelpers.P2PKHChangeSource.__proto__),
    account: dart.finalFieldType(dart.legacy(core.int)),
    wallet: dart.finalFieldType(dart.legacy(wallet.WalletBTC))
  }));
  var address$ = dart.privateName(txhelpers, "TransactionDestination.address");
  var amount$ = dart.privateName(txhelpers, "TransactionDestination.amount");
  txhelpers.TransactionDestination = class TransactionDestination extends core.Object {
    get address() {
      return this[address$];
    }
    set address(value) {
      super.address = value;
    }
    get amount() {
      return this[amount$];
    }
    set amount(value) {
      super.amount = value;
    }
  };
  (txhelpers.TransactionDestination.new = function(opts) {
    let address = opts && 'address' in opts ? opts.address : null;
    let amount = opts && 'amount' in opts ? opts.amount : null;
    this[address$] = address;
    this[amount$] = amount;
    ;
  }).prototype = txhelpers.TransactionDestination.prototype;
  dart.addTypeTests(txhelpers.TransactionDestination);
  dart.addTypeCaches(txhelpers.TransactionDestination);
  dart.setLibraryUri(txhelpers.TransactionDestination, I[2]);
  dart.setFieldSignature(txhelpers.TransactionDestination, () => ({
    __proto__: dart.getFields(txhelpers.TransactionDestination.__proto__),
    address: dart.finalFieldType(dart.legacy(utils$.Address)),
    amount: dart.finalFieldType(dart.legacy(utils$.Amount))
  }));
  txhelpers.makeTxOutputs = function makeTxOutputs(destinations) {
    let outputs = T.JSArrayOfTxOutL().of([]);
    for (let i = 0; i < dart.notNull(destinations[$length]); i = i + 1) {
      outputs[$add](txhelpers.makeTxOutput(destinations[$_get](i)));
    }
    return outputs;
  };
  txhelpers.makeTxOutput = function makeTxOutput(destination) {
    let pkScript = txscript.payToAddrScript(destination.address);
    return new transaction.TxOut.new({value: destination.amount, pkScript: pkScript});
  };
  helpers.sumOutputValues = function sumOutputValues(outputs) {
    let totalOutput = new utils$.Amount.new(core.BigInt.zero);
    for (let i = 0; i < dart.notNull(outputs[$length]); i = i + 1) {
      totalOutput = totalOutput['+'](outputs[$_get](i).value);
    }
    return totalOutput;
  };
  helpers.sumOutputSerializeSizes = function sumOutputSerializeSizes(outputs) {
    let serializeSize = 0;
    for (let i = 0; i < dart.notNull(outputs[$length]); i = i + 1) {
      serializeSize = serializeSize + dart.notNull(outputs[$_get](i).serializeSize());
    }
    return serializeSize;
  };
  txsizes.sumOutputSerializeSizes = function sumOutputSerializeSizes$(outputs) {
    let serializeSize = 0;
    for (let i = 0; i < dart.notNull(outputs[$length]); i = i + 1) {
      serializeSize = serializeSize + dart.notNull(outputs[$_get](i).serializeSize());
    }
    return serializeSize;
  };
  txsizes.estimateSerializeSize = function estimateSerializeSize(inputCount, txOuts, addChangeOutput) {
    let changeSize = 0;
    let outputCount = txOuts[$length];
    if (dart.test(addChangeOutput)) {
      changeSize = 34;
      outputCount = dart.notNull(outputCount) + 1;
    }
    return 8 + dart.notNull(transaction.varIntSerializeSize(inputCount)) + dart.notNull(transaction.varIntSerializeSize(outputCount)) + dart.notNull(inputCount) * 149 + dart.notNull(txsizes.sumOutputSerializeSizes(txOuts)) + changeSize;
  };
  txsizes.estimateVirtualSize = function estimateVirtualSize(numP2PKHIns, numP2WPKHIns, numNestedP2WPKHIns, txOuts, addChangeOutput) {
    let changeSize = 0;
    if (dart.test(addChangeOutput)) {
      changeSize = 31;
    }
    let baseSize = 8 + dart.notNull(transaction.varIntSerializeSize(dart.notNull(numP2PKHIns) + dart.notNull(numP2WPKHIns) + dart.notNull(numNestedP2WPKHIns))) + dart.notNull(transaction.varIntSerializeSize(txOuts[$length])) + dart.notNull(numP2PKHIns) * 149 + dart.notNull(numP2WPKHIns) * 41 + dart.notNull(numNestedP2WPKHIns) * 64 + dart.notNull(txsizes.sumOutputSerializeSizes(txOuts)) + changeSize;
    let witnessWeight = 0;
    if (dart.notNull(numP2WPKHIns) + dart.notNull(numNestedP2WPKHIns) > 0) {
      witnessWeight = 2 + dart.notNull(transaction.varIntSerializeSize(dart.notNull(numP2WPKHIns) + dart.notNull(numNestedP2WPKHIns))) + dart.notNull(numP2WPKHIns) * 109 + dart.notNull(numNestedP2WPKHIns) * 109;
    }
    return baseSize + ((witnessWeight + 3) / 4)[$ceil]();
  };
  dart.defineLazy(txsizes, {
    /*txsizes.WITNESS_SCALE_FACTOR*/get WITNESS_SCALE_FACTOR() {
      return 4;
    },
    /*txsizes.P2PKH_PK_SCRIPT_SIZE*/get P2PKH_PK_SCRIPT_SIZE() {
      return 25;
    },
    /*txsizes.P2PKH_OUTPUT_SIZE*/get P2PKH_OUTPUT_SIZE() {
      return 34;
    },
    /*txsizes.REDEEM_P2PKH_SIG_SCRIPT_SIZE*/get REDEEM_P2PKH_SIG_SCRIPT_SIZE() {
      return 108;
    },
    /*txsizes.REDEEM_P2PKH_INPUT_SIZE*/get REDEEM_P2PKH_INPUT_SIZE() {
      return 149;
    },
    /*txsizes.REDEEM_P2WPKH_SCRIPT_SIZE*/get REDEEM_P2WPKH_SCRIPT_SIZE() {
      return 0;
    },
    /*txsizes.REDEEM_P2WPKH_INPUT_SIZE*/get REDEEM_P2WPKH_INPUT_SIZE() {
      return 41;
    },
    /*txsizes.P2WPKH_PK_SCRIPT_SIZE*/get P2WPKH_PK_SCRIPT_SIZE() {
      return 22;
    },
    /*txsizes.P2WPKH_OUTPUT_SIZE*/get P2WPKH_OUTPUT_SIZE() {
      return 31;
    },
    /*txsizes.REDEEM_NESTED_P2WPKH_SCRIPT_SIZE*/get REDEEM_NESTED_P2WPKH_SCRIPT_SIZE() {
      return 23;
    },
    /*txsizes.REDEEM_NESTED_P2WPKH_INPUT_SIZE*/get REDEEM_NESTED_P2WPKH_INPUT_SIZE() {
      return 64;
    },
    /*txsizes.REDEEM_P2WPKH_INPUT_WITNESS_WEIGHT*/get REDEEM_P2WPKH_INPUT_WITNESS_WEIGHT() {
      return 109;
    }
  }, true);
  var _key = dart.privateName(hdkeychain, "_key");
  var _chainCode = dart.privateName(hdkeychain, "_chainCode");
  var _parentFP = dart.privateName(hdkeychain, "_parentFP");
  var _pubKey = dart.privateName(hdkeychain, "_pubKey");
  var _pubKeyHash = dart.privateName(hdkeychain, "_pubKeyHash");
  var _depth = dart.privateName(hdkeychain, "_depth");
  var _index = dart.privateName(hdkeychain, "_index");
  var _isPrivate = dart.privateName(hdkeychain, "_isPrivate");
  hdkeychain.ExtendedKey = class ExtendedKey extends core.Object {
    get pubKeyBytes() {
      if (!dart.test(this[_isPrivate])) {
        return this[_key];
      }
      if (this[_pubKey] == null) {
        let privateKeyNum = utils$.bytesToInt(this[_key]);
        let p = hdkeychain.ecc.G['*'](privateKeyNum);
        this[_pubKey] = p.getEncoded();
      }
      return this[_pubKey];
    }
    get pubKeyHash() {
      this[_pubKeyHash] == null ? this[_pubKeyHash] = hdkeychain.hash160(this.pubKeyBytes) : null;
      return this[_pubKeyHash];
    }
    child(i) {
      let isChildHardened = dart.notNull(i) >= 2147483648.0;
      if (!dart.test(this[_isPrivate]) && isChildHardened) {
        dart.throw(new core.FormatException.new("cannot derive a hardened key from a public key"));
      }
      let data = _native_typed_data.NativeByteData.new(37);
      let offset = 0;
      let key = null;
      if (isChildHardened) {
        data[$setUint8](offset, 0);
        offset = offset + 1;
        key = this[_key];
      } else {
        key = this.pubKeyBytes;
      }
      for (let idx = 0; idx < dart.notNull(key[$length]); idx = idx + 1) {
        data[$setUint8](offset, key[$_get](idx));
        offset = offset + 1;
      }
      data[$setUint32](offset, i);
      let ilr = hdkeychain.hmacSHA512(this[_chainCode], data[$buffer][$asUint8List]());
      let il = ilr[$sublist](0, (dart.notNull(ilr[$length]) / 2)[$truncate]());
      let childChainCode = ilr[$sublist]((dart.notNull(ilr[$length]) / 2)[$truncate]());
      let ilNum = utils$.bytesToInt(il);
      if (dart.notNull(ilNum.compareTo(hdkeychain.ecc.n)) >= 0) {
        dart.throw(new core.FormatException.new("the extended key at this index is invalid"));
      }
      let childKey = null;
      if (dart.test(this[_isPrivate])) {
        let keyNum = utils$.bytesToInt(this[_key]);
        childKey = utils$.intToBytes(ilNum['+'](keyNum)['%'](hdkeychain.ecc.n));
      } else {
        let key = hdkeychain.ecc.G['*'](ilNum);
        let pubKey = hdkeychain.ecc.curve.decodePoint(this[_key]);
        let childPoint = key['+'](pubKey);
        childKey = childPoint.getEncoded();
      }
      let parentFP = hdkeychain.hash160(this.pubKeyBytes)[$sublist](0, 4);
      return new hdkeychain.ExtendedKey.new({key: childKey, chainCode: childChainCode, parentFP: parentFP, depth: dart.notNull(this[_depth]) + 1, index: i, isPrivate: this[_isPrivate]});
    }
    neuter() {
      if (!dart.test(this[_isPrivate])) {
        return this;
      }
      return new hdkeychain.ExtendedKey.new({key: this.pubKeyBytes, chainCode: this[_chainCode], parentFP: this[_parentFP], depth: this[_depth], index: this[_index], isPrivate: false});
    }
    ECPubKey(compressed) {
      let pubKey = hdkeychain.ecc.curve.decodePoint(this.pubKeyBytes);
      return pubKey.getEncoded(compressed);
    }
    ECPrivKey() {
      return new api.ECPrivateKey.new(utils$.bytesToInt(this[_key]), hdkeychain.ecc);
    }
    toBase58(version) {
      let buffer = _native_typed_data.NativeByteData.new(78);
      let offset = 0;
      buffer[$setUint32](offset, utils$.bytesToInt(version).toInt());
      offset = offset + 4;
      buffer[$setUint8](offset, this[_depth]);
      offset = offset + 1;
      for (let i = 0; i < dart.notNull(this[_parentFP][$length]); i = i + 1) {
        buffer[$setUint8](offset, this[_parentFP][$_get](i));
        offset = offset + 1;
      }
      buffer[$setUint32](offset, this[_index]);
      offset = offset + 4;
      for (let i = 0; i < dart.notNull(this[_chainCode][$length]); i = i + 1) {
        buffer[$setUint8](offset, this[_chainCode][$_get](i));
        offset = offset + 1;
      }
      if (dart.test(this[_isPrivate])) {
        buffer[$setUint8](offset, 0);
        offset = offset + 1;
      }
      for (let i = 0; i < dart.notNull(this[_key][$length]); i = i + 1) {
        buffer[$setUint8](offset, this[_key][$_get](i));
        offset = offset + 1;
      }
      return base58check.Base58CheckCodec.new().encode(buffer[$buffer][$asUint8List]());
    }
    static fromPrivateKey(privateKey, chainCode, parentFP = null, depth = 0, index = 0) {
      return new hdkeychain.ExtendedKey.new({key: privateKey, chainCode: chainCode, parentFP: parentFP, depth: depth, index: index, isPrivate: true});
    }
    static fromSeed(seed) {
      if (dart.notNull(seed[$length]) < 16) {
        dart.throw(new core.FormatException.new("Seed should be at least 128 bits"));
      }
      if (dart.notNull(seed[$length]) > 64) {
        dart.throw(new core.FormatException.new("Seed should be at most 512 bits"));
      }
      let I = hdkeychain.hmacSHA512(_native_typed_data.NativeUint8List.fromList("Bitcoin seed"[$codeUnits]), seed);
      let IL = I[$sublist](0, 32);
      let IR = I[$sublist](32);
      return hdkeychain.ExtendedKey.fromPrivateKey(IL, IR);
    }
  };
  (hdkeychain.ExtendedKey.new = function(opts) {
    let t0, t0$, t0$0, t0$1;
    let key = opts && 'key' in opts ? opts.key : null;
    let chainCode = opts && 'chainCode' in opts ? opts.chainCode : null;
    let parentFP = opts && 'parentFP' in opts ? opts.parentFP : null;
    let depth = opts && 'depth' in opts ? opts.depth : null;
    let index = opts && 'index' in opts ? opts.index : null;
    let isPrivate = opts && 'isPrivate' in opts ? opts.isPrivate : null;
    this[_key] = null;
    this[_chainCode] = null;
    this[_parentFP] = null;
    this[_pubKey] = null;
    this[_pubKeyHash] = null;
    this[_depth] = null;
    this[_index] = null;
    this[_isPrivate] = null;
    this[_key] = key;
    this[_chainCode] = chainCode;
    this[_parentFP] = (t0 = parentFP, t0 == null ? _native_typed_data.NativeUint8List.fromList(T.JSArrayOfintL().of([0, 0, 0, 0])) : t0);
    this[_depth] = (t0$ = depth, t0$ == null ? 0 : t0$);
    this[_index] = (t0$0 = index, t0$0 == null ? 0 : t0$0);
    this[_isPrivate] = (t0$1 = isPrivate, t0$1 == null ? false : t0$1);
  }).prototype = hdkeychain.ExtendedKey.prototype;
  dart.addTypeTests(hdkeychain.ExtendedKey);
  dart.addTypeCaches(hdkeychain.ExtendedKey);
  dart.setMethodSignature(hdkeychain.ExtendedKey, () => ({
    __proto__: dart.getMethods(hdkeychain.ExtendedKey.__proto__),
    child: dart.fnType(dart.legacy(hdkeychain.ExtendedKey), [dart.legacy(core.int)]),
    neuter: dart.fnType(dart.legacy(hdkeychain.ExtendedKey), []),
    ECPubKey: dart.fnType(dart.legacy(typed_data.Uint8List), [dart.legacy(core.bool)]),
    ECPrivKey: dart.fnType(dart.legacy(api.ECPrivateKey), []),
    toBase58: dart.fnType(dart.legacy(core.String), [dart.legacy(typed_data.Uint8List)])
  }));
  dart.setGetterSignature(hdkeychain.ExtendedKey, () => ({
    __proto__: dart.getGetters(hdkeychain.ExtendedKey.__proto__),
    pubKeyBytes: dart.legacy(typed_data.Uint8List),
    pubKeyHash: dart.legacy(typed_data.Uint8List)
  }));
  dart.setLibraryUri(hdkeychain.ExtendedKey, I[3]);
  dart.setFieldSignature(hdkeychain.ExtendedKey, () => ({
    __proto__: dart.getFields(hdkeychain.ExtendedKey.__proto__),
    [_key]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_chainCode]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_parentFP]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_pubKey]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_pubKeyHash]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_depth]: dart.fieldType(dart.legacy(core.int)),
    [_index]: dart.fieldType(dart.legacy(core.int)),
    [_isPrivate]: dart.fieldType(dart.legacy(core.bool))
  }));
  hdkeychain.hash160 = function hash160(buffer) {
    return new hash.RIPEMD160.new().update(chainhash.hashB(buffer)).digest();
  };
  hdkeychain.hmacSHA512 = function hmacSHA512(key, data) {
    return new hash.Hmac.new(new hash.SHA512.new(), key).update(data).digest();
  };
  dart.defineLazy(hdkeychain, {
    /*hdkeychain.HARDENED_KEY_START*/get HARDENED_KEY_START() {
      return 2147483648.0;
    },
    /*hdkeychain.MIN_SEED_BYTES*/get MIN_SEED_BYTES() {
      return 16;
    },
    /*hdkeychain.MAX_SEED_BYTES*/get MAX_SEED_BYTES() {
      return 64;
    },
    /*hdkeychain.serializedKeyLen*/get serializedKeyLen() {
      return 78;
    },
    /*hdkeychain.ecc*/get ecc() {
      return secp256k1.ECCurve_secp256k1.new();
    }
  }, true);
  var opcode$ = dart.privateName(txscript, "ParsedOpcode.opcode");
  var data$ = dart.privateName(txscript, "ParsedOpcode.data");
  txscript.ParsedOpcode = class ParsedOpcode extends core.Object {
    get opcode() {
      return this[opcode$];
    }
    set opcode(value) {
      super.opcode = value;
    }
    get data() {
      return this[data$];
    }
    set data(value) {
      this[data$] = value;
    }
    bytes() {
      let retbytes = null;
      if (dart.notNull(this.opcode.length) > 0) {
        retbytes = _native_typed_data.NativeByteData.new(this.opcode.length);
      } else {
        retbytes = _native_typed_data.NativeByteData.new(1 + dart.notNull(this.data[$length]) - dart.notNull(this.opcode.length));
      }
      let offset = 0;
      retbytes[$setUint8](offset, this.opcode.value);
      offset = dart.notNull(offset) + 1;
      if (this.opcode.length === 1) {
        return retbytes[$buffer][$asUint8List]();
      }
      let nbytes = this.opcode.length;
      if (dart.notNull(this.opcode.length) < 0) {
        let l = this.data[$length];
        switch (this.opcode.length) {
          case -1:
          {
            retbytes[$setUint8](offset, l);
            offset = dart.notNull(offset) + 1;
            nbytes = dart.notNull(retbytes[$getUint8](1)) + dart.notNull(retbytes[$lengthInBytes]);
            break;
          }
          case -2:
          {
            retbytes[$setUint8](offset, dart.notNull(l) & 255);
            offset = dart.notNull(offset) + 1;
            retbytes[$setUint8](offset, dart.notNull(l) >> 8 & 255);
            offset = dart.notNull(offset) + 1;
            nbytes = dart.notNull(retbytes[$getUint16](1)) + dart.notNull(retbytes[$lengthInBytes]);
            break;
          }
          case -4:
          {
            retbytes[$setUint8](offset, dart.notNull(l) & 255);
            offset = dart.notNull(offset) + 1;
            retbytes[$setUint8](offset, dart.notNull(l) >> 8 & 255);
            offset = dart.notNull(offset) + 1;
            retbytes[$setUint8](offset, dart.notNull(l) >> 16 & 255);
            offset = dart.notNull(offset) + 1;
            retbytes[$setUint8](offset, l[$rightShift](24) & 255);
            offset = dart.notNull(offset) + 1;
            nbytes = dart.notNull(retbytes[$getUint32](1)) + dart.notNull(retbytes[$lengthInBytes]);
            break;
          }
        }
      }
      offset = transaction.copyBytes(retbytes, this.data, offset);
      if (retbytes[$lengthInBytes] != nbytes) {
        dart.throw(new core.FormatException.new("internal consistency error - parsed opcode " + dart.str(this.opcode.name) + " has data length " + dart.str(retbytes[$lengthInBytes]) + " when " + dart.str(nbytes) + " was expected"));
      }
      return retbytes[$buffer][$asUint8List]();
    }
    toString() {
      return "[" + dart.str(this.data[$join](", ")) + "]";
    }
  };
  (txscript.ParsedOpcode.new = function(opts) {
    let t0, t0$;
    let opcode = opts && 'opcode' in opts ? opts.opcode : null;
    let data = opts && 'data' in opts ? opts.data : null;
    this[data$] = null;
    this[opcode$] = opcode;
    if (dart.test((t0$ = (t0 = data, t0 == null ? null : t0[$isEmpty]), t0$ == null ? true : t0$))) {
      this.data = _native_typed_data.NativeUint8List.new(0);
    }
  }).prototype = txscript.ParsedOpcode.prototype;
  dart.addTypeTests(txscript.ParsedOpcode);
  dart.addTypeCaches(txscript.ParsedOpcode);
  dart.setMethodSignature(txscript.ParsedOpcode, () => ({
    __proto__: dart.getMethods(txscript.ParsedOpcode.__proto__),
    bytes: dart.fnType(dart.legacy(typed_data.Uint8List), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(txscript.ParsedOpcode, I[4]);
  dart.setFieldSignature(txscript.ParsedOpcode, () => ({
    __proto__: dart.getFields(txscript.ParsedOpcode.__proto__),
    opcode: dart.finalFieldType(dart.legacy(txscript.OpCode)),
    data: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  dart.defineExtensionMethods(txscript.ParsedOpcode, ['toString']);
  var value$ = dart.privateName(txscript, "OpCode.value");
  var name$ = dart.privateName(txscript, "OpCode.name");
  var length$ = dart.privateName(txscript, "OpCode.length");
  txscript.OpCode = class OpCode extends core.Object {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
  };
  (txscript.OpCode.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let name = opts && 'name' in opts ? opts.name : null;
    let length = opts && 'length' in opts ? opts.length : null;
    this[value$] = value;
    this[name$] = name;
    this[length$] = length;
    ;
  }).prototype = txscript.OpCode.prototype;
  dart.addTypeTests(txscript.OpCode);
  dart.addTypeCaches(txscript.OpCode);
  dart.setLibraryUri(txscript.OpCode, I[4]);
  dart.setFieldSignature(txscript.OpCode, () => ({
    __proto__: dart.getFields(txscript.OpCode.__proto__),
    value: dart.finalFieldType(dart.legacy(core.int)),
    name: dart.finalFieldType(dart.legacy(core.String)),
    length: dart.finalFieldType(dart.legacy(core.int))
  }));
  var _script = dart.privateName(txscript, "_script");
  var _addData = dart.privateName(txscript, "_addData");
  txscript.ScriptBuilder = class ScriptBuilder extends core.Object {
    add(code) {
      if (dart.notNull(this[_script][$length]) + 1 > 16384) {
        dart.throw(new core.FormatException.new("adding an opcode would exceed the maximum allowed canonical script length of " + dart.str(16384)));
      }
      this[_script][$add](code);
      return this;
    }
    addOps(opcodes) {
      if (dart.notNull(this[_script][$length]) + dart.notNull(opcodes[$length]) > 16384) {
        dart.throw(new core.FormatException.new("adding opcodes would exceed the maximum allowed canonical script length of " + dart.str(16384)));
      }
      this[_script][$addAll](opcodes);
      return this;
    }
    addData(data) {
      let dataSize = txscript._canonicalDataSize(data);
      if (dart.notNull(this[_script][$length]) + dart.notNull(dataSize) > 1024) {
        dart.throw(new core.FormatException.new("adding " + dart.str(dataSize) + " bytes of data would exceed the maximum allowed canonical script length of " + dart.str(1024)));
      }
      let dataLen = data[$length];
      if (dart.notNull(dataLen) > 2048) {
        dart.throw(new core.FormatException.new("adding a data element of " + dart.str(dataLen) + " bytes would exceed the maximum allowed script element size of " + dart.str(2048)));
      }
      return this[_addData](data);
    }
    [_addData](data) {
      let dataLen = data[$length];
      if (dataLen === 0 || dataLen === 1 && data[$_get](0) === 0) {
        this[_script][$add](0);
        return this;
      } else if (dataLen === 1 && dart.notNull(data[$_get](0)) <= 16) {
        this[_script][$add](81 - 1 + dart.notNull(data[$_get](0)));
        return this;
      } else if (dataLen === 1 && data[$_get](0) === 129) {
        this[_script][$add](79);
        return this;
      }
      if (dart.notNull(dataLen) < 76) {
        this[_script][$add](1 - 1 + dart.notNull(dataLen));
      } else if (dart.notNull(dataLen) <= 255) {
        this[_script][$add](76);
        this[_script][$add](dataLen);
      } else if (dart.notNull(dataLen) <= 65535) {
        this[_script][$add](77);
        this[_script][$add](dart.notNull(dataLen) & 255);
        this[_script][$add](dart.notNull(dataLen) >> 8 & 255);
      } else {
        this[_script][$add](dart.notNull(dataLen) & 255);
        this[_script][$add](dart.notNull(dataLen) >> 8 & 255);
        this[_script][$add](dart.notNull(dataLen) >> 16 & 255);
        this[_script][$add](dataLen[$rightShift](24) & 255);
        this[_script][$add](78);
      }
      this[_script][$addAll](data);
      return this;
    }
    reset() {
      this[_script][$clear]();
    }
    script() {
      return _native_typed_data.NativeUint8List.fromList(this[_script]);
    }
  };
  (txscript.ScriptBuilder.new = function(opts) {
    let t0, t0$;
    let script = opts && 'script' in opts ? opts.script : null;
    this[_script] = null;
    this[_script] = dart.test((t0$ = (t0 = script, t0 == null ? null : t0[$isEmpty]), t0$ == null ? true : t0$)) ? T.JSArrayOfintL().of([]) : script[$toList]();
  }).prototype = txscript.ScriptBuilder.prototype;
  dart.addTypeTests(txscript.ScriptBuilder);
  dart.addTypeCaches(txscript.ScriptBuilder);
  dart.setMethodSignature(txscript.ScriptBuilder, () => ({
    __proto__: dart.getMethods(txscript.ScriptBuilder.__proto__),
    add: dart.fnType(dart.legacy(txscript.ScriptBuilder), [dart.legacy(core.int)]),
    addOps: dart.fnType(dart.legacy(txscript.ScriptBuilder), [dart.legacy(core.List$(dart.legacy(core.int)))]),
    addData: dart.fnType(dart.legacy(txscript.ScriptBuilder), [dart.legacy(typed_data.Uint8List)]),
    [_addData]: dart.fnType(dart.legacy(txscript.ScriptBuilder), [dart.legacy(typed_data.Uint8List)]),
    reset: dart.fnType(dart.void, []),
    script: dart.fnType(dart.legacy(typed_data.Uint8List), [])
  }));
  dart.setLibraryUri(txscript.ScriptBuilder, I[4]);
  dart.setFieldSignature(txscript.ScriptBuilder, () => ({
    __proto__: dart.getFields(txscript.ScriptBuilder.__proto__),
    [_script]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  var _getKey$ = dart.privateName(txscript, "_getKey");
  txscript.KeyClosure = class KeyClosure extends core.Object {
    getKey(addr) {
      let t0;
      return T.KeyClosureRespL().as((t0 = addr, dart.dsend(this, _getKey$, [t0])));
    }
  };
  (txscript.KeyClosure.new = function(_getKey) {
    this[_getKey$] = _getKey;
    ;
  }).prototype = txscript.KeyClosure.prototype;
  dart.addTypeTests(txscript.KeyClosure);
  dart.addTypeCaches(txscript.KeyClosure);
  dart.setMethodSignature(txscript.KeyClosure, () => ({
    __proto__: dart.getMethods(txscript.KeyClosure.__proto__),
    getKey: dart.fnType(dart.legacy(txscript.KeyClosureResp), [dart.legacy(utils$.Address)])
  }));
  dart.setLibraryUri(txscript.KeyClosure, I[4]);
  dart.setFieldSignature(txscript.KeyClosure, () => ({
    __proto__: dart.getFields(txscript.KeyClosure.__proto__),
    [_getKey$]: dart.finalFieldType(dart.legacy(core.Function))
  }));
  var key$ = dart.privateName(txscript, "KeyClosureResp.key");
  var compressed$ = dart.privateName(txscript, "KeyClosureResp.compressed");
  txscript.KeyClosureResp = class KeyClosureResp extends core.Object {
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get compressed() {
      return this[compressed$];
    }
    set compressed(value) {
      super.compressed = value;
    }
  };
  (txscript.KeyClosureResp.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let compressed = opts && 'compressed' in opts ? opts.compressed : null;
    this[key$] = key;
    this[compressed$] = compressed;
    ;
  }).prototype = txscript.KeyClosureResp.prototype;
  dart.addTypeTests(txscript.KeyClosureResp);
  dart.addTypeCaches(txscript.KeyClosureResp);
  dart.setLibraryUri(txscript.KeyClosureResp, I[4]);
  dart.setFieldSignature(txscript.KeyClosureResp, () => ({
    __proto__: dart.getFields(txscript.KeyClosureResp.__proto__),
    key: dart.finalFieldType(dart.legacy(api.ECPrivateKey)),
    compressed: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var _getScript$ = dart.privateName(txscript, "_getScript");
  txscript.ScriptClosure = class ScriptClosure extends core.Object {
    getScript(addr) {
      let t0;
      return T.Uint8ListL().as((t0 = addr, dart.dsend(this, _getScript$, [t0])));
    }
  };
  (txscript.ScriptClosure.new = function(_getScript) {
    this[_getScript$] = _getScript;
    ;
  }).prototype = txscript.ScriptClosure.prototype;
  dart.addTypeTests(txscript.ScriptClosure);
  dart.addTypeCaches(txscript.ScriptClosure);
  dart.setMethodSignature(txscript.ScriptClosure, () => ({
    __proto__: dart.getMethods(txscript.ScriptClosure.__proto__),
    getScript: dart.fnType(dart.legacy(typed_data.Uint8List), [dart.legacy(utils$.Address)])
  }));
  dart.setLibraryUri(txscript.ScriptClosure, I[4]);
  dart.setFieldSignature(txscript.ScriptClosure, () => ({
    __proto__: dart.getFields(txscript.ScriptClosure.__proto__),
    [_getScript$]: dart.finalFieldType(dart.legacy(core.Function))
  }));
  var hashPrevOuts = dart.privateName(txscript, "TxSigHashes.hashPrevOuts");
  var hashSequence = dart.privateName(txscript, "TxSigHashes.hashSequence");
  var hashOutputs = dart.privateName(txscript, "TxSigHashes.hashOutputs");
  txscript.TxSigHashes = class TxSigHashes extends core.Object {
    get hashPrevOuts() {
      return this[hashPrevOuts];
    }
    set hashPrevOuts(value) {
      this[hashPrevOuts] = value;
    }
    get hashSequence() {
      return this[hashSequence];
    }
    set hashSequence(value) {
      this[hashSequence] = value;
    }
    get hashOutputs() {
      return this[hashOutputs];
    }
    set hashOutputs(value) {
      this[hashOutputs] = value;
    }
    get length() {
      return dart.notNull(this.hashPrevOuts.length) + dart.notNull(this.hashSequence.length) + dart.notNull(this.hashOutputs.length);
    }
  };
  (txscript.TxSigHashes.new = function(tx) {
    this[hashPrevOuts] = null;
    this[hashSequence] = null;
    this[hashOutputs] = null;
    this.hashPrevOuts = txscript._calcHashPrevOuts(tx);
    this.hashSequence = txscript._calcHashSequence(tx);
    this.hashOutputs = txscript._calcHashOutputs(tx);
  }).prototype = txscript.TxSigHashes.prototype;
  dart.addTypeTests(txscript.TxSigHashes);
  dart.addTypeCaches(txscript.TxSigHashes);
  dart.setGetterSignature(txscript.TxSigHashes, () => ({
    __proto__: dart.getGetters(txscript.TxSigHashes.__proto__),
    length: dart.legacy(core.int)
  }));
  dart.setLibraryUri(txscript.TxSigHashes, I[4]);
  dart.setFieldSignature(txscript.TxSigHashes, () => ({
    __proto__: dart.getFields(txscript.TxSigHashes.__proto__),
    hashPrevOuts: dart.fieldType(dart.legacy(chainhash.Hash)),
    hashSequence: dart.fieldType(dart.legacy(chainhash.Hash)),
    hashOutputs: dart.fieldType(dart.legacy(chainhash.Hash))
  }));
  txscript._parseScriptTemplate = function _parseScriptTemplate(script, opcodes) {
    let retScript = T.JSArrayOfParsedOpcodeL().of([]);
    for (let i = 0; i < dart.notNull(script[$length]);) {
      let instr = script[$_get](i);
      let op = opcodes[$_get](instr);
      let pop = new txscript.ParsedOpcode.new({opcode: op});
      let len = op.length;
      if (len === 1) {
        i = i + 1;
      } else if (dart.notNull(len) > 1) {
        let scrLen = script[$sublist](i)[$length];
        if (dart.notNull(scrLen) < dart.notNull(op.length)) {
          dart.throw(new core.FormatException.new("opcode " + dart.str(op.name) + " requires " + dart.str(op.length) + " bytes, but script only has " + dart.str(scrLen) + " remaining"));
        }
        pop.data = script[$sublist](i + 1, i + dart.notNull(op.length));
        i = i + dart.notNull(op.length);
      } else if (dart.notNull(len) < 0) {
        let l = null;
        let off = i + 1;
        let offScr = script[$sublist](off);
        if (dart.notNull(offScr[$length]) < -dart.notNull(op.length)) {
          dart.throw(new core.FormatException.new("opcode " + dart.str(op.name) + " requires " + dart.str(-dart.notNull(op.length)) + " bytes, but script only has " + dart.str(offScr[$length]) + " remaining"));
        }
        switch (op.length) {
          case -1:
          {
            l = script[$_get](off);
            break;
          }
          case -2:
          {
            l = (dart.notNull(script[$_get](off + 1)) << 8 | dart.notNull(script[$_get](off))) >>> 0;
            break;
          }
          case -4:
          {
            l = (dart.notNull(script[$_get](off + 3)) << 24 | dart.notNull(script[$_get](off + 2)) << 16 >>> 0 | dart.notNull(script[$_get](off + 1)) << 8 >>> 0 | dart.notNull(script[$_get](off))) >>> 0;
            break;
          }
          default:
          {
            dart.throw(new core.FormatException.new("invalid opcode length " + dart.str(op.length)));
          }
        }
        off = off + -dart.notNull(op.length);
        if (dart.notNull(l) > dart.notNull(offScr[$length]) || dart.notNull(l) < 0) {
          dart.throw(new core.FormatException.new("opcode " + dart.str(op.name) + " pushes " + dart.str(l) + " bytes, but script only has " + dart.str(offScr[$length]) + " remaining"));
        }
        pop.data = script[$sublist](off, off + dart.notNull(l));
        i = i + (1 - dart.notNull(op.length) + dart.notNull(l));
      }
      retScript[$add](pop);
    }
    return retScript;
  };
  txscript.parseScript = function parseScript(script) {
    return txscript._parseScriptTemplate(script, txscript.opcodeArray);
  };
  txscript.unparseScript = function unparseScript(pops) {
    let script = T.JSArrayOfintL().of([]);
    for (let i = 0; i < dart.notNull(pops[$length]); i = i + 1) {
      let pop = pops[$_get](i);
      script[$addAll](pop.bytes());
    }
    return _native_typed_data.NativeUint8List.fromList(script);
  };
  txscript.removeOpcode = function removeOpcode(pkscript, val) {
    pkscript[$removeWhere](dart.fn(pop => {
      if (pop.opcode.value == val) {
        return true;
      }
      return false;
    }, T.ParsedOpcodeLToboolL()));
    return pkscript;
  };
  txscript.isScriptHash = function isScriptHash(pops) {
    return pops[$length] === 3 && pops[$_get](0).opcode.value === 169 && pops[$_get](1).opcode.value === 20 && pops[$_get](2).opcode.value === 135;
  };
  txscript.isPayToScriptHash = function isPayToScriptHash(script) {
    return txscript.isScriptHash(txscript.parseScript(script));
  };
  txscript.isWitnessScriptHash = function isWitnessScriptHash(pops) {
    return pops[$length] === 2 && pops[$_get](0).opcode.value === 0 && pops[$_get](1).opcode.value === 32;
  };
  txscript.isPayToWitnessScriptHash = function isPayToWitnessScriptHash(script) {
    return txscript.isWitnessScriptHash(txscript.parseScript(script));
  };
  txscript.isPayToWitnessPubKeyHash = function isPayToWitnessPubKeyHash(script) {
    return txscript.isWitnessPubKeyHash(txscript.parseScript(script));
  };
  txscript.isWitnessPubKeyHash = function isWitnessPubKeyHash(pops) {
    return pops[$length] === 2 && pops[$_get](0).opcode.value === 0 && pops[$_get](1).opcode.value === 20;
  };
  txscript._canonicalDataSize = function _canonicalDataSize(data) {
    let dataLen = T.intL().as(dart.dload(data, 'length'));
    if (dataLen === 0) {
      return 1;
    } else if (dataLen === 1 && dart.dtest(dart.dsend(dart.dsend(data, '_get', [0]), '<=', [16]))) {
      return 1;
    } else if (dataLen === 1 && dart.equals(dart.dsend(data, '_get', [0]), 129)) {
      return 1;
    }
    if (dart.notNull(dataLen) < 76) {
      return 1 + dart.notNull(dataLen);
    } else if (dart.notNull(dataLen) <= 255) {
      return 2 + dart.notNull(dataLen);
    } else if (dart.notNull(dataLen) <= 65535) {
      return 3 + dart.notNull(dataLen);
    }
    return 5 + dart.notNull(dataLen);
  };
  txscript._sigHashWitnessSerializeSize = function _sigHashWitnessSerializeSize(subScript, sigHashes) {
    let size = 4 * 5 + dart.notNull(sigHashes.length) + 32 + 8;
    if (dart.test(txscript.isWitnessPubKeyHash(subScript))) {
      size = size + (6 + dart.notNull(subScript[$_get](1).data[$length]));
    } else {
      size = size + dart.notNull(txscript.unparseScript(subScript)[$length]);
    }
    return size;
  };
  txscript.calcSignatureHash = function calcSignatureHash(prevOutScript, hashType, tx, idx) {
    if ((dart.notNull(hashType) & 31) >>> 0 === 3 && dart.notNull(idx) >= dart.notNull(tx.txOut[$length])) {
      dart.throw(new core.FormatException.new("attempt to sign single input at index " + dart.str(idx) + " >= " + dart.str(tx.txOut[$length]) + " outputs"));
    }
    txscript.removeOpcode(prevOutScript, 171);
    let signScript = null;
    try {
      signScript = txscript.unparseScript(prevOutScript);
    } catch (e) {
      let _ = dart.getThrown(e);
      core.print(_);
    }
    let txBuf = _native_typed_data.NativeByteData.new(tx.serializeSize());
    tx.serialize(txBuf);
    let txCopy = transaction.MsgTx.fromBytes(txBuf);
    txCopy.txIn[$_get](idx).signatureScript = signScript;
    for (let i = 0; i < dart.notNull(txCopy.txIn[$length]); i = i + 1) {
      if (i !== idx) {
        txCopy.txIn[$_get](i).signatureScript = null;
      }
    }
    switch ((dart.notNull(hashType) & 31) >>> 0) {
      case 2:
      {
        txCopy.txOut[$clear]();
        for (let i = 0; i < dart.notNull(txCopy.txIn[$length]); i = i + 1) {
          if (i !== idx) {
            txCopy.txIn[$_get](i).sequence = 0;
          }
        }
        break;
      }
      case 3:
      {
        txCopy.txOut = txCopy.txOut[$sublist](0, dart.notNull(idx) + 1);
        for (let i = 0; i < dart.notNull(idx); i = i + 1) {
          txCopy.txOut[$_get](i).value = new utils$.Amount.new(core._BigIntImpl.from(-1));
          txCopy.txOut[$_get](i).pkScript = null;
        }
        for (let i = 0; i < dart.notNull(txCopy.txIn[$length]); i = i + 1) {
          if (i !== idx) {
            txCopy.txIn[$_get](i).sequence = 0;
          }
        }
        break;
      }
    }
    let wbuf = _native_typed_data.NativeByteData.new(dart.notNull(txCopy.serializeSizeStripped()) + 4);
    txCopy.serializeNoWitness(wbuf);
    wbuf[$setUint32](dart.notNull(wbuf[$lengthInBytes]) - 4, hashType, typed_data.Endian.little);
    return chainhash.hashB(chainhash.hashB(wbuf[$buffer][$asUint8List]()));
  };
  txscript.calcWitnessSignatureHash = function calcWitnessSignatureHash(subScript, sigHashes, hashType, tx, idx, amt) {
    let t1, t1$, t1$0, t1$1, t1$2, t1$3;
    if (dart.notNull(idx) > dart.notNull(tx.txIn[$length]) - 1) {
      dart.throw(new core.FormatException.new("idx " + dart.str(idx) + " but " + dart.str(tx.txIn[$length]) + " txins"));
    }
    let offset = 0;
    let sigHash = _native_typed_data.NativeByteData.new(txscript._sigHashWitnessSerializeSize(subScript, sigHashes));
    sigHash[$setUint32](offset, tx.version, typed_data.Endian.little);
    offset = dart.notNull(offset) + 4;
    let zeroHash = new chainhash.Hash.new(_native_typed_data.NativeUint8List.new(32));
    if ((dart.notNull(hashType) & 128) === 0) {
      offset = transaction.copyBytes(sigHash, sigHashes.hashPrevOuts.cloneBytes(), offset);
    } else {
      offset = transaction.copyBytes(sigHash, zeroHash.cloneBytes(), offset);
    }
    if ((dart.notNull(hashType) & 128) === 0 && (dart.notNull(hashType) & 31) >>> 0 !== 3 && (dart.notNull(hashType) & 31) >>> 0 !== 2) {
      offset = transaction.copyBytes(sigHash, sigHashes.hashSequence.cloneBytes(), offset);
    } else {
      offset = transaction.copyBytes(sigHash, zeroHash.cloneBytes(), offset);
    }
    let txIn = tx.txIn[$_get](idx);
    offset = transaction.copyBytes(sigHash, txIn.previousOutPoint.hash.cloneBytes(), offset);
    sigHash[$setUint32](offset, txIn.previousOutPoint.index, typed_data.Endian.little);
    offset = dart.notNull(offset) + 4;
    if (dart.test(txscript.isWitnessPubKeyHash(subScript))) {
      sigHash[$setUint8]((t1 = offset, offset = dart.notNull(t1) + 1, t1), 25);
      sigHash[$setUint8]((t1$ = offset, offset = dart.notNull(t1$) + 1, t1$), 118);
      sigHash[$setUint8]((t1$0 = offset, offset = dart.notNull(t1$0) + 1, t1$0), 169);
      sigHash[$setUint8]((t1$1 = offset, offset = dart.notNull(t1$1) + 1, t1$1), 20);
      offset = transaction.copyBytes(sigHash, subScript[$_get](1).data, offset);
      sigHash[$setUint8]((t1$2 = offset, offset = dart.notNull(t1$2) + 1, t1$2), 136);
      sigHash[$setUint8]((t1$3 = offset, offset = dart.notNull(t1$3) + 1, t1$3), 172);
    } else {
      let rawScript = txscript.unparseScript(subScript);
      offset = transaction.writeVarBytes(sigHash, rawScript, offset);
    }
    offset = transaction.copyBytes(sigHash, amt.bytes(), offset);
    sigHash[$setUint32](offset, txIn.sequence, typed_data.Endian.little);
    offset = dart.notNull(offset) + 4;
    if ((dart.notNull(hashType) & 3) >>> 0 !== 3 && (dart.notNull(hashType) & 2) >>> 0 !== 2) {
      offset = transaction.copyBytes(sigHash, sigHashes.hashOutputs.cloneBytes(), offset);
    } else if ((dart.notNull(hashType) & 31) >>> 0 === 3 && dart.notNull(idx) < dart.notNull(tx.txOut[$length])) {
      let b = _native_typed_data.NativeByteData.new(tx.txOut[$_get](idx).serializeSize());
      transaction.writeTxOut(b, tx.txOut[$_get](idx), 0);
      offset = transaction.copyBytes(sigHash, chainhash.hashB(chainhash.hashB(b[$buffer][$asUint8List]())), offset);
    } else {
      offset = transaction.copyBytes(sigHash, zeroHash.cloneBytes(), offset);
    }
    sigHash[$setUint32](offset, tx.lockTime, typed_data.Endian.little);
    offset = dart.notNull(offset) + 4;
    sigHash[$setUint32](offset, hashType, typed_data.Endian.little);
    offset = dart.notNull(offset) + 4;
    return chainhash.hashB(chainhash.hashB(sigHash[$buffer][$asUint8List]()));
  };
  txscript._rmPadding = function _rmPadding(buf) {
    let i = 0;
    let len = dart.notNull(buf[$length]) - 1;
    while (buf[$_get](i) === 0 && (dart.notNull(buf[$_get](i + 1)) & 128) === 0 && i < len) {
      i = i + 1;
    }
    if (i === 0) {
      return buf;
    }
    return buf[$sublist](i);
  };
  txscript._constructLength = function _constructLength(arr, len) {
    if (dart.notNull(len) < 128) {
      arr[$add](len);
      return;
    }
    let octets = 1 + (math.log(len) / math.log(2))[$truncate]()[$rightShift](3);
    arr[$add]((octets | 128) >>> 0);
    while ((octets = octets - 1) > 0) {
      arr[$add](len[$rightShift](octets << 3 >>> 0) & 255);
    }
    arr[$add](len);
  };
  txscript._sigToList = function _sigToList(r, s) {
    if ((dart.notNull(r[$_get](0)) & 128) !== 0) {
      r[$insert](0, 0);
    }
    if ((dart.notNull(s[$_get](0)) & 128) !== 0) {
      s[$insert](0, 0);
    }
    r = txscript._rmPadding(r);
    s = txscript._rmPadding(s);
    while (s[$_get](0) === 0 && (dart.notNull(s[$_get](1)) & 128) === 0) {
      s = s[$sublist](1);
    }
    let arr = T.JSArrayOfintL().of([2]);
    txscript._constructLength(arr, r[$length]);
    arr[$addAll](r);
    arr[$add](2);
    txscript._constructLength(arr, s[$length]);
    arr[$addAll](s);
    let res = T.JSArrayOfintL().of([48]);
    txscript._constructLength(res, arr[$length]);
    res[$addAll](arr);
    return res;
  };
  txscript.ECSign = function ECSign(key, hash) {
    let signer = new ecdsa_signer.ECDSASigner.new(null, new hmac.HMac.new(new sha256.SHA256Digest.new(), 64));
    let pkp = new (T.PrivateKeyParameterOfPrivateKeyL()).new(key);
    signer.init(true, pkp);
    let sig = T.ECSignatureL().as(signer.generateSignature(hash));
    let nh = hdkeychain.ecc.n['>>'](1);
    let s = sig.s;
    if (dart.notNull(sig.s.compareTo(nh)) > 0) {
      s = hdkeychain.ecc.n['-'](sig.s);
    }
    return new api.ECSignature.new(sig.r, s);
  };
  txscript.rawTxInWitnessSignature = function rawTxInWitnessSignature(tx, sigHashes, idx, amt, subScript, hashType, key) {
    let parsedScript = txscript.parseScript(subScript);
    let hash = txscript.calcWitnessSignatureHash(parsedScript, sigHashes, hashType, tx, idx, amt);
    let sig = txscript.ECSign(T.ECPrivateKeyL().as(key), hash);
    let ret = txscript._sigToList(utils$.intToBytes(sig.r)[$toList](), utils$.intToBytes(sig.s)[$toList]());
    ret[$add](hashType);
    return _native_typed_data.NativeUint8List.fromList(ret);
  };
  txscript.rawTxInSignature = function rawTxInSignature(tx, idx, subScript, hashType, key) {
    let parsedScript = null;
    try {
      parsedScript = txscript.parseScript(subScript);
    } catch (e) {
      let _ = dart.getThrown(e);
    }
    let hash = txscript.calcSignatureHash(parsedScript, hashType, tx, idx);
    let sig = txscript.ECSign(key, hash);
    let ret = txscript._sigToList(utils$.intToBytes(sig.r)[$toList](), utils$.intToBytes(sig.s)[$toList]());
    ret[$add](hashType);
    return _native_typed_data.NativeUint8List.fromList(ret);
  };
  txscript.signatureScript = function signatureScript(tx, idx, subScript, hashType, privKey, compress) {
    let sig = txscript.rawTxInSignature(tx, idx, subScript, hashType, privKey);
    let pkScript = hdkeychain.ecc.G['*'](privKey.d).getEncoded(compress);
    return new txscript.ScriptBuilder.new().addData(sig).addData(pkScript).script();
  };
  txscript.witnessSignature = function witnessSignature(tx, sigHashes, idx, amt, subscript, hashType, privKey, compress) {
    let sig = txscript.rawTxInWitnessSignature(tx, sigHashes, idx, amt, subscript, hashType, privKey);
    let pk = privKey.parameters.G['*'](privKey.d);
    let pkData = pk.getEncoded(compress);
    return T.JSArrayOfUint8ListL().of([sig, pkData]);
  };
  txscript.sign = function sign(net, tx, idx, subScript, hashType, kdb, sdb) {
    let data = txscript.extractPkScriptAddrs(subScript, net);
    let cls = T.intL().as(data[$_get](0));
    let addrs = T.ListLOfAddressL().as(data[$_get](1));
    let nRequired = T.intL().as(data[$_get](2));
    switch (cls) {
      case 2:
      {
        let resp = kdb.getKey(addrs[$_get](0));
        let script = txscript.signatureScript(tx, idx, subScript, hashType, resp.key, resp.compressed);
        return [script, cls, addrs, nRequired];
      }
      case 4:
      {
        let script = sdb.getScript(addrs[$_get](0));
        return [script, cls, addrs, nRequired];
      }
      case 7:
      {
        dart.throw(new core.FormatException.new("can't sign NULLDATA transactions"));
        break;
      }
      default:
      {
        dart.throw(new core.FormatException.new("can't sign unknown transactions"));
      }
    }
  };
  txscript.mergeScripts = function mergeScripts(net, tx, idx, pkScript, cls, addrs, nRequired, sigScript, prevScript) {
    let t3, t3$, t4, t4$;
    switch (cls) {
      case 4:
      {
        let sigPops = null;
        try {
          sigPops = txscript.parseScript(sigScript);
        } catch (e) {
          let _ = dart.getThrown(e);
        }
        if (dart.test((t3$ = (t3 = sigPops, t3 == null ? null : t3[$isEmpty]), t3$ == null ? true : t3$))) {
          return prevScript;
        }
        let prevPops = null;
        try {
          prevPops = txscript.parseScript(prevScript);
        } catch (e$) {
          let _ = dart.getThrown(e$);
        }
        if (dart.test((t4$ = (t4 = prevPops, t4 == null ? null : t4[$isEmpty]), t4$ == null ? true : t4$))) {
          return sigScript;
        }
        let script = sigPops[$_get](dart.notNull(sigPops[$length]) - 1).data;
        let data = txscript.extractPkScriptAddrs(script, net);
        let cls = T.intL().as(data[$_get](0));
        let addrs = T.ListLOfAddressL().as(data[$_get](1));
        nRequired = T.intL().as(data[$_get](2));
        try {
          sigScript = txscript.unparseScript(sigPops);
        } catch (e$0) {
          let _ = dart.getThrown(e$0);
        }
        try {
          prevScript = txscript.unparseScript(prevPops);
        } catch (e$1) {
          let _ = dart.getThrown(e$1);
        }
        let mergedScript = txscript.mergeScripts(net, tx, idx, script, cls, addrs, nRequired, sigScript, prevScript);
        return new txscript.ScriptBuilder.new().addOps(mergedScript).addData(script).script();
      }
      default:
      {
        if (dart.notNull(sigScript[$length]) > dart.notNull(prevScript[$length])) {
          return sigScript;
        }
        return prevScript;
      }
    }
  };
  txscript.signTxOutput = function signTxOutput(net, tx, idx, pkScript, hashType, kdb, sdb, previousScript) {
    let data = txscript.sign(net, tx, idx, pkScript, hashType, kdb, sdb);
    let sigScript = T.Uint8ListL().as(data[$_get](0));
    let cls = T.intL().as(data[$_get](1));
    let addrs = T.ListLOfAddressL().as(data[$_get](2));
    let nRequired = T.intL().as(data[$_get](3));
    if (cls === 4) {
      data = txscript.sign(net, tx, idx, sigScript, hashType, kdb, sdb);
      let realSigScript = T.Uint8ListL().as(data[$_get](0));
      let builder = new txscript.ScriptBuilder.new();
      builder.addOps(realSigScript).addData(sigScript);
      sigScript = builder.script();
    }
    let mergedScript = txscript.mergeScripts(net, tx, idx, pkScript, cls, addrs, nRequired, sigScript, previousScript);
    return mergedScript;
  };
  txscript.isSmallInt = function isSmallInt(op) {
    if (op.value === 0 || dart.notNull(op.value) >= 81 && dart.notNull(op.value) <= 96) {
      return true;
    }
    return false;
  };
  txscript.asSmallInt = function asSmallInt(op) {
    if (op.value === 0) {
      return 0;
    }
    return dart.notNull(op.value) - (81 - 1);
  };
  txscript._payToPubKeyHashScript = function _payToPubKeyHashScript(pubKeyHash) {
    return new txscript.ScriptBuilder.new().add(118).add(169).addData(pubKeyHash).add(136).add(172).script();
  };
  txscript._payToWitnessPubKeyHashScript = function _payToWitnessPubKeyHashScript(pubKeyHash) {
    return new txscript.ScriptBuilder.new().add(0).addData(pubKeyHash).script();
  };
  txscript.payToWitnessScriptHashScript = function payToWitnessScriptHashScript(scriptHash) {
    return new txscript.ScriptBuilder.new().add(0).addData(scriptHash).script();
  };
  txscript._payToScriptHashScript = function _payToScriptHashScript(hash) {
    return new txscript.ScriptBuilder.new().add(169).addData(hash).add(135).script();
  };
  txscript.payToAddrScript = function payToAddrScript(addr) {
    if (T.AddressPubKeyHashL().is(addr)) {
      return txscript._payToPubKeyHashScript(addr.scriptAddress());
    } else if (T.AddressScriptHashL().is(addr)) {
      return txscript._payToScriptHashScript(addr.scriptAddress());
    } else if (T.AddressWitnessPubKeyHashL().is(addr)) {
      return txscript._payToWitnessPubKeyHashScript(addr.scriptAddress());
    }
    dart.throw(new core.FormatException.new("unable to generate payment script for unsupported address type"));
  };
  txscript.isPubkey = function isPubkey(pops) {
    return pops[$length] === 2 && (pops[$_get](0).data[$length] === 33 || pops[$_get](0).data[$length] === 65) && pops[$_get](1).opcode.value === 172;
  };
  txscript.isPubkeyHash = function isPubkeyHash(pops) {
    return pops[$length] === 5 && pops[$_get](0).opcode.value === 118 && pops[$_get](1).opcode.value === 169 && pops[$_get](2).opcode.value === 20 && pops[$_get](3).opcode.value === 136 && pops[$_get](4).opcode.value === 172;
  };
  txscript.isNullData = function isNullData(pops) {
    let l = pops[$length];
    if (l === 1 && pops[$_get](0).opcode.value === 106) {
      return true;
    }
    return l === 2 && pops[$_get](0).opcode.value === 106 && (dart.test(txscript.isSmallInt(pops[$_get](1).opcode)) || dart.notNull(pops[$_get](1).opcode.value) <= 78) && dart.notNull(pops[$_get](1).data[$length]) <= 256;
  };
  txscript._typeOfScript = function _typeOfScript(pops) {
    if (dart.test(txscript.isPubkey(pops))) {
      return 1;
    } else if (dart.test(txscript.isPubkeyHash(pops))) {
      return 2;
    } else if (dart.test(txscript.isWitnessPubKeyHash(pops))) {
      return 3;
    } else if (dart.test(txscript.isScriptHash(pops))) {
      return 4;
    } else if (dart.test(txscript.isWitnessScriptHash(pops))) {
      return 5;
    } else if (dart.test(txscript.isNullData(pops))) {
      return 7;
    }
    return 0;
  };
  txscript.extractPkScriptAddrs = function extractPkScriptAddrs(pkScript, net) {
    let addrs = T.JSArrayOfAddressL().of([]);
    let requiredSigs = null;
    let pops = null;
    try {
      pops = txscript.parseScript(pkScript);
    } catch (e) {
      let _ = dart.getThrown(e);
      return [0, addrs];
    }
    let scriptClass = txscript._typeOfScript(pops);
    switch (scriptClass) {
      case 2:
      {
        requiredSigs = 1;
        addrs[$add](new utils$.AddressPubKeyHash.new({hash: pops[$_get](2).data, net: net}));
        break;
      }
      case 4:
      {
        requiredSigs = 1;
        addrs[$add](new utils$.AddressScriptHash.new({scriptHash: pops[$_get](1).data, net: net}));
        break;
      }
      case 3:
      {
        requiredSigs = 1;
        addrs[$add](new utils$.AddressWitnessPubKeyHash.new({hash: pops[$_get](1).data, net: net}));
        break;
      }
    }
    return [scriptClass, addrs, requiredSigs];
  };
  txscript._calcHashPrevOuts = function _calcHashPrevOuts(tx) {
    let size = 0;
    for (let i = 0; i < dart.notNull(tx.txIn[$length]); i = i + 1) {
      size = size + dart.notNull(tx.txIn[$_get](i).previousOutPoint.length);
    }
    let b = _native_typed_data.NativeByteData.new(size);
    let offset = 0;
    for (let i = 0; i < dart.notNull(tx.txIn[$length]); i = i + 1) {
      offset = transaction.copyBytes(b, tx.txIn[$_get](i).previousOutPoint.hash.cloneBytes(), offset);
      b[$setUint32](offset, tx.txIn[$_get](i).previousOutPoint.index, typed_data.Endian.little);
      offset = dart.notNull(offset) + 4;
    }
    return chainhash.hashH(chainhash.hashB(b[$buffer][$asUint8List]()));
  };
  txscript._calcHashSequence = function _calcHashSequence(tx) {
    let b = _native_typed_data.NativeByteData.new(4 * dart.notNull(tx.txIn[$length]));
    let offset = 0;
    for (let i = 0; i < dart.notNull(tx.txIn[$length]); i = i + 1) {
      b[$setUint32](offset, tx.txIn[$_get](i).sequence, typed_data.Endian.little);
      offset = offset + 4;
    }
    return chainhash.hashH(chainhash.hashB(b[$buffer][$asUint8List]()));
  };
  txscript._calcHashOutputs = function _calcHashOutputs(tx) {
    let size = 0;
    for (let i = 0; i < dart.notNull(tx.txOut[$length]); i = i + 1) {
      size = size + dart.notNull(tx.txOut[$_get](i).serializeSize());
    }
    let b = _native_typed_data.NativeByteData.new(size);
    let offset = 0;
    for (let i = 0; i < dart.notNull(tx.txOut[$length]); i = i + 1) {
      offset = transaction.writeTxOut(b, tx.txOut[$_get](i), offset);
    }
    return chainhash.hashH(chainhash.hashB(b[$buffer][$asUint8List]()));
  };
  dart.defineLazy(txscript, {
    /*txscript.OP_0*/get OP_0() {
      return 0;
    },
    /*txscript.OP_FALSE*/get OP_FALSE() {
      return 0;
    },
    /*txscript.OP_DATA_1*/get OP_DATA_1() {
      return 1;
    },
    /*txscript.OP_DATA_2*/get OP_DATA_2() {
      return 2;
    },
    /*txscript.OP_DATA_3*/get OP_DATA_3() {
      return 3;
    },
    /*txscript.OP_DATA_4*/get OP_DATA_4() {
      return 4;
    },
    /*txscript.OP_DATA_5*/get OP_DATA_5() {
      return 5;
    },
    /*txscript.OP_DATA_6*/get OP_DATA_6() {
      return 6;
    },
    /*txscript.OP_DATA_7*/get OP_DATA_7() {
      return 7;
    },
    /*txscript.OP_DATA_8*/get OP_DATA_8() {
      return 8;
    },
    /*txscript.OP_DATA_9*/get OP_DATA_9() {
      return 9;
    },
    /*txscript.OP_DATA_10*/get OP_DATA_10() {
      return 10;
    },
    /*txscript.OP_DATA_11*/get OP_DATA_11() {
      return 11;
    },
    /*txscript.OP_DATA_12*/get OP_DATA_12() {
      return 12;
    },
    /*txscript.OP_DATA_13*/get OP_DATA_13() {
      return 13;
    },
    /*txscript.OP_DATA_14*/get OP_DATA_14() {
      return 14;
    },
    /*txscript.OP_DATA_15*/get OP_DATA_15() {
      return 15;
    },
    /*txscript.OP_DATA_16*/get OP_DATA_16() {
      return 16;
    },
    /*txscript.OP_DATA_17*/get OP_DATA_17() {
      return 17;
    },
    /*txscript.OP_DATA_18*/get OP_DATA_18() {
      return 18;
    },
    /*txscript.OP_DATA_19*/get OP_DATA_19() {
      return 19;
    },
    /*txscript.OP_DATA_20*/get OP_DATA_20() {
      return 20;
    },
    /*txscript.OP_DATA_21*/get OP_DATA_21() {
      return 21;
    },
    /*txscript.OP_DATA_22*/get OP_DATA_22() {
      return 22;
    },
    /*txscript.OP_DATA_23*/get OP_DATA_23() {
      return 23;
    },
    /*txscript.OP_DATA_24*/get OP_DATA_24() {
      return 24;
    },
    /*txscript.OP_DATA_25*/get OP_DATA_25() {
      return 25;
    },
    /*txscript.OP_DATA_26*/get OP_DATA_26() {
      return 26;
    },
    /*txscript.OP_DATA_27*/get OP_DATA_27() {
      return 27;
    },
    /*txscript.OP_DATA_28*/get OP_DATA_28() {
      return 28;
    },
    /*txscript.OP_DATA_29*/get OP_DATA_29() {
      return 29;
    },
    /*txscript.OP_DATA_30*/get OP_DATA_30() {
      return 30;
    },
    /*txscript.OP_DATA_31*/get OP_DATA_31() {
      return 31;
    },
    /*txscript.OP_DATA_32*/get OP_DATA_32() {
      return 32;
    },
    /*txscript.OP_DATA_33*/get OP_DATA_33() {
      return 33;
    },
    /*txscript.OP_DATA_34*/get OP_DATA_34() {
      return 34;
    },
    /*txscript.OP_DATA_35*/get OP_DATA_35() {
      return 35;
    },
    /*txscript.OP_DATA_36*/get OP_DATA_36() {
      return 36;
    },
    /*txscript.OP_DATA_37*/get OP_DATA_37() {
      return 37;
    },
    /*txscript.OP_DATA_38*/get OP_DATA_38() {
      return 38;
    },
    /*txscript.OP_DATA_39*/get OP_DATA_39() {
      return 39;
    },
    /*txscript.OP_DATA_40*/get OP_DATA_40() {
      return 40;
    },
    /*txscript.OP_DATA_41*/get OP_DATA_41() {
      return 41;
    },
    /*txscript.OP_DATA_42*/get OP_DATA_42() {
      return 42;
    },
    /*txscript.OP_DATA_43*/get OP_DATA_43() {
      return 43;
    },
    /*txscript.OP_DATA_44*/get OP_DATA_44() {
      return 44;
    },
    /*txscript.OP_DATA_45*/get OP_DATA_45() {
      return 45;
    },
    /*txscript.OP_DATA_46*/get OP_DATA_46() {
      return 46;
    },
    /*txscript.OP_DATA_47*/get OP_DATA_47() {
      return 47;
    },
    /*txscript.OP_DATA_48*/get OP_DATA_48() {
      return 48;
    },
    /*txscript.OP_DATA_49*/get OP_DATA_49() {
      return 49;
    },
    /*txscript.OP_DATA_50*/get OP_DATA_50() {
      return 50;
    },
    /*txscript.OP_DATA_51*/get OP_DATA_51() {
      return 51;
    },
    /*txscript.OP_DATA_52*/get OP_DATA_52() {
      return 52;
    },
    /*txscript.OP_DATA_53*/get OP_DATA_53() {
      return 53;
    },
    /*txscript.OP_DATA_54*/get OP_DATA_54() {
      return 54;
    },
    /*txscript.OP_DATA_55*/get OP_DATA_55() {
      return 55;
    },
    /*txscript.OP_DATA_56*/get OP_DATA_56() {
      return 56;
    },
    /*txscript.OP_DATA_57*/get OP_DATA_57() {
      return 57;
    },
    /*txscript.OP_DATA_58*/get OP_DATA_58() {
      return 58;
    },
    /*txscript.OP_DATA_59*/get OP_DATA_59() {
      return 59;
    },
    /*txscript.OP_DATA_60*/get OP_DATA_60() {
      return 60;
    },
    /*txscript.OP_DATA_61*/get OP_DATA_61() {
      return 61;
    },
    /*txscript.OP_DATA_62*/get OP_DATA_62() {
      return 62;
    },
    /*txscript.OP_DATA_63*/get OP_DATA_63() {
      return 63;
    },
    /*txscript.OP_DATA_64*/get OP_DATA_64() {
      return 64;
    },
    /*txscript.OP_DATA_65*/get OP_DATA_65() {
      return 65;
    },
    /*txscript.OP_DATA_66*/get OP_DATA_66() {
      return 66;
    },
    /*txscript.OP_DATA_67*/get OP_DATA_67() {
      return 67;
    },
    /*txscript.OP_DATA_68*/get OP_DATA_68() {
      return 68;
    },
    /*txscript.OP_DATA_69*/get OP_DATA_69() {
      return 69;
    },
    /*txscript.OP_DATA_70*/get OP_DATA_70() {
      return 70;
    },
    /*txscript.OP_DATA_71*/get OP_DATA_71() {
      return 71;
    },
    /*txscript.OP_DATA_72*/get OP_DATA_72() {
      return 72;
    },
    /*txscript.OP_DATA_73*/get OP_DATA_73() {
      return 73;
    },
    /*txscript.OP_DATA_74*/get OP_DATA_74() {
      return 74;
    },
    /*txscript.OP_DATA_75*/get OP_DATA_75() {
      return 75;
    },
    /*txscript.OP_PUSHDATA1*/get OP_PUSHDATA1() {
      return 76;
    },
    /*txscript.OP_PUSHDATA2*/get OP_PUSHDATA2() {
      return 77;
    },
    /*txscript.OP_PUSHDATA4*/get OP_PUSHDATA4() {
      return 78;
    },
    /*txscript.OP_1NEGATE*/get OP_1NEGATE() {
      return 79;
    },
    /*txscript.OP_RESERVED*/get OP_RESERVED() {
      return 80;
    },
    /*txscript.OP_1*/get OP_1() {
      return 81;
    },
    /*txscript.OP_TRUE*/get OP_TRUE() {
      return 81;
    },
    /*txscript.OP_2*/get OP_2() {
      return 82;
    },
    /*txscript.OP_3*/get OP_3() {
      return 83;
    },
    /*txscript.OP_4*/get OP_4() {
      return 84;
    },
    /*txscript.OP_5*/get OP_5() {
      return 85;
    },
    /*txscript.OP_6*/get OP_6() {
      return 86;
    },
    /*txscript.OP_7*/get OP_7() {
      return 87;
    },
    /*txscript.OP_8*/get OP_8() {
      return 88;
    },
    /*txscript.OP_9*/get OP_9() {
      return 89;
    },
    /*txscript.OP_10*/get OP_10() {
      return 90;
    },
    /*txscript.OP_11*/get OP_11() {
      return 91;
    },
    /*txscript.OP_12*/get OP_12() {
      return 92;
    },
    /*txscript.OP_13*/get OP_13() {
      return 93;
    },
    /*txscript.OP_14*/get OP_14() {
      return 94;
    },
    /*txscript.OP_15*/get OP_15() {
      return 95;
    },
    /*txscript.OP_16*/get OP_16() {
      return 96;
    },
    /*txscript.OP_NOP*/get OP_NOP() {
      return 97;
    },
    /*txscript.OP_VER*/get OP_VER() {
      return 98;
    },
    /*txscript.OP_IF*/get OP_IF() {
      return 99;
    },
    /*txscript.OP_NOTIF*/get OP_NOTIF() {
      return 100;
    },
    /*txscript.OP_VERIF*/get OP_VERIF() {
      return 101;
    },
    /*txscript.OP_VERNOTIF*/get OP_VERNOTIF() {
      return 102;
    },
    /*txscript.OP_ELSE*/get OP_ELSE() {
      return 103;
    },
    /*txscript.OP_ENDIF*/get OP_ENDIF() {
      return 104;
    },
    /*txscript.OP_VERIFY*/get OP_VERIFY() {
      return 105;
    },
    /*txscript.OP_RETURN*/get OP_RETURN() {
      return 106;
    },
    /*txscript.OP_TOALTSTACK*/get OP_TOALTSTACK() {
      return 107;
    },
    /*txscript.OP_FROMALTSTACK*/get OP_FROMALTSTACK() {
      return 108;
    },
    /*txscript.OP_2DROP*/get OP_2DROP() {
      return 109;
    },
    /*txscript.OP_2DUP*/get OP_2DUP() {
      return 110;
    },
    /*txscript.OP_3DUP*/get OP_3DUP() {
      return 111;
    },
    /*txscript.OP_2OVER*/get OP_2OVER() {
      return 112;
    },
    /*txscript.OP_2ROT*/get OP_2ROT() {
      return 113;
    },
    /*txscript.OP_2SWAP*/get OP_2SWAP() {
      return 114;
    },
    /*txscript.OP_IFDUP*/get OP_IFDUP() {
      return 115;
    },
    /*txscript.OP_DEPTH*/get OP_DEPTH() {
      return 116;
    },
    /*txscript.OP_DROP*/get OP_DROP() {
      return 117;
    },
    /*txscript.OP_DUP*/get OP_DUP() {
      return 118;
    },
    /*txscript.OP_NIP*/get OP_NIP() {
      return 119;
    },
    /*txscript.OP_OVER*/get OP_OVER() {
      return 120;
    },
    /*txscript.OP_PICK*/get OP_PICK() {
      return 121;
    },
    /*txscript.OP_ROLL*/get OP_ROLL() {
      return 122;
    },
    /*txscript.OP_ROT*/get OP_ROT() {
      return 123;
    },
    /*txscript.OP_SWAP*/get OP_SWAP() {
      return 124;
    },
    /*txscript.OP_TUCK*/get OP_TUCK() {
      return 125;
    },
    /*txscript.OP_CAT*/get OP_CAT() {
      return 126;
    },
    /*txscript.OP_SUBSTR*/get OP_SUBSTR() {
      return 127;
    },
    /*txscript.OP_LEFT*/get OP_LEFT() {
      return 128;
    },
    /*txscript.OP_RIGHT*/get OP_RIGHT() {
      return 129;
    },
    /*txscript.OP_SIZE*/get OP_SIZE() {
      return 130;
    },
    /*txscript.OP_INVERT*/get OP_INVERT() {
      return 131;
    },
    /*txscript.OP_AND*/get OP_AND() {
      return 132;
    },
    /*txscript.OP_OR*/get OP_OR() {
      return 133;
    },
    /*txscript.OP_XOR*/get OP_XOR() {
      return 134;
    },
    /*txscript.OP_EQUAL*/get OP_EQUAL() {
      return 135;
    },
    /*txscript.OP_EQUALVERIFY*/get OP_EQUALVERIFY() {
      return 136;
    },
    /*txscript.OP_RESERVED1*/get OP_RESERVED1() {
      return 137;
    },
    /*txscript.OP_RESERVED2*/get OP_RESERVED2() {
      return 138;
    },
    /*txscript.OP_1ADD*/get OP_1ADD() {
      return 139;
    },
    /*txscript.OP_1SUB*/get OP_1SUB() {
      return 140;
    },
    /*txscript.OP_2MUL*/get OP_2MUL() {
      return 141;
    },
    /*txscript.OP_2DIV*/get OP_2DIV() {
      return 142;
    },
    /*txscript.OP_NEGATE*/get OP_NEGATE() {
      return 143;
    },
    /*txscript.OP_ABS*/get OP_ABS() {
      return 144;
    },
    /*txscript.OP_NOT*/get OP_NOT() {
      return 145;
    },
    /*txscript.OP_0NOTEQUAL*/get OP_0NOTEQUAL() {
      return 146;
    },
    /*txscript.OP_ADD*/get OP_ADD() {
      return 147;
    },
    /*txscript.OP_SUB*/get OP_SUB() {
      return 148;
    },
    /*txscript.OP_MUL*/get OP_MUL() {
      return 149;
    },
    /*txscript.OP_DIV*/get OP_DIV() {
      return 150;
    },
    /*txscript.OP_MOD*/get OP_MOD() {
      return 151;
    },
    /*txscript.OP_LSHIFT*/get OP_LSHIFT() {
      return 152;
    },
    /*txscript.OP_RSHIFT*/get OP_RSHIFT() {
      return 153;
    },
    /*txscript.OP_BOOLAND*/get OP_BOOLAND() {
      return 154;
    },
    /*txscript.OP_BOOLOR*/get OP_BOOLOR() {
      return 155;
    },
    /*txscript.OP_NUMEQUAL*/get OP_NUMEQUAL() {
      return 156;
    },
    /*txscript.OP_NUMEQUALVERIFY*/get OP_NUMEQUALVERIFY() {
      return 157;
    },
    /*txscript.OP_NUMNOTEQUAL*/get OP_NUMNOTEQUAL() {
      return 158;
    },
    /*txscript.OP_LESSTHAN*/get OP_LESSTHAN() {
      return 159;
    },
    /*txscript.OP_GREATERTHAN*/get OP_GREATERTHAN() {
      return 160;
    },
    /*txscript.OP_LESSTHANOREQUAL*/get OP_LESSTHANOREQUAL() {
      return 161;
    },
    /*txscript.OP_GREATERTHANOREQUAL*/get OP_GREATERTHANOREQUAL() {
      return 162;
    },
    /*txscript.OP_MIN*/get OP_MIN() {
      return 163;
    },
    /*txscript.OP_MAX*/get OP_MAX() {
      return 164;
    },
    /*txscript.OP_WITHIN*/get OP_WITHIN() {
      return 165;
    },
    /*txscript.OP_RIPEMD160*/get OP_RIPEMD160() {
      return 166;
    },
    /*txscript.OP_SHA1*/get OP_SHA1() {
      return 167;
    },
    /*txscript.OP_SHA256*/get OP_SHA256() {
      return 168;
    },
    /*txscript.OP_HASH160*/get OP_HASH160() {
      return 169;
    },
    /*txscript.OP_HASH256*/get OP_HASH256() {
      return 170;
    },
    /*txscript.OP_CODESEPARATOR*/get OP_CODESEPARATOR() {
      return 171;
    },
    /*txscript.OP_CHECKSIG*/get OP_CHECKSIG() {
      return 172;
    },
    /*txscript.OP_CHECKSIGVERIFY*/get OP_CHECKSIGVERIFY() {
      return 173;
    },
    /*txscript.OP_CHECKMULTISIG*/get OP_CHECKMULTISIG() {
      return 174;
    },
    /*txscript.OP_CHECKMULTISIGVERIFY*/get OP_CHECKMULTISIGVERIFY() {
      return 175;
    },
    /*txscript.OP_NOP1*/get OP_NOP1() {
      return 176;
    },
    /*txscript.OP_NOP2*/get OP_NOP2() {
      return 177;
    },
    /*txscript.OP_CHECKLOCKTIMEVERIFY*/get OP_CHECKLOCKTIMEVERIFY() {
      return 177;
    },
    /*txscript.OP_NOP3*/get OP_NOP3() {
      return 178;
    },
    /*txscript.OP_CHECKSEQUENCEVERIFY*/get OP_CHECKSEQUENCEVERIFY() {
      return 178;
    },
    /*txscript.OP_NOP4*/get OP_NOP4() {
      return 179;
    },
    /*txscript.OP_NOP5*/get OP_NOP5() {
      return 180;
    },
    /*txscript.OP_NOP6*/get OP_NOP6() {
      return 181;
    },
    /*txscript.OP_NOP7*/get OP_NOP7() {
      return 182;
    },
    /*txscript.OP_NOP8*/get OP_NOP8() {
      return 183;
    },
    /*txscript.OP_NOP9*/get OP_NOP9() {
      return 184;
    },
    /*txscript.OP_NOP10*/get OP_NOP10() {
      return 185;
    },
    /*txscript.OP_UNKNOWN186*/get OP_UNKNOWN186() {
      return 186;
    },
    /*txscript.OP_UNKNOWN187*/get OP_UNKNOWN187() {
      return 187;
    },
    /*txscript.OP_UNKNOWN188*/get OP_UNKNOWN188() {
      return 188;
    },
    /*txscript.OP_UNKNOWN189*/get OP_UNKNOWN189() {
      return 189;
    },
    /*txscript.OP_UNKNOWN190*/get OP_UNKNOWN190() {
      return 190;
    },
    /*txscript.OP_UNKNOWN191*/get OP_UNKNOWN191() {
      return 191;
    },
    /*txscript.OP_UNKNOWN192*/get OP_UNKNOWN192() {
      return 192;
    },
    /*txscript.OP_UNKNOWN193*/get OP_UNKNOWN193() {
      return 193;
    },
    /*txscript.OP_UNKNOWN194*/get OP_UNKNOWN194() {
      return 194;
    },
    /*txscript.OP_UNKNOWN195*/get OP_UNKNOWN195() {
      return 195;
    },
    /*txscript.OP_UNKNOWN196*/get OP_UNKNOWN196() {
      return 196;
    },
    /*txscript.OP_UNKNOWN197*/get OP_UNKNOWN197() {
      return 197;
    },
    /*txscript.OP_UNKNOWN198*/get OP_UNKNOWN198() {
      return 198;
    },
    /*txscript.OP_UNKNOWN199*/get OP_UNKNOWN199() {
      return 199;
    },
    /*txscript.OP_UNKNOWN200*/get OP_UNKNOWN200() {
      return 200;
    },
    /*txscript.OP_UNKNOWN201*/get OP_UNKNOWN201() {
      return 201;
    },
    /*txscript.OP_UNKNOWN202*/get OP_UNKNOWN202() {
      return 202;
    },
    /*txscript.OP_UNKNOWN203*/get OP_UNKNOWN203() {
      return 203;
    },
    /*txscript.OP_UNKNOWN204*/get OP_UNKNOWN204() {
      return 204;
    },
    /*txscript.OP_UNKNOWN205*/get OP_UNKNOWN205() {
      return 205;
    },
    /*txscript.OP_UNKNOWN206*/get OP_UNKNOWN206() {
      return 206;
    },
    /*txscript.OP_UNKNOWN207*/get OP_UNKNOWN207() {
      return 207;
    },
    /*txscript.OP_UNKNOWN208*/get OP_UNKNOWN208() {
      return 208;
    },
    /*txscript.OP_UNKNOWN209*/get OP_UNKNOWN209() {
      return 209;
    },
    /*txscript.OP_UNKNOWN210*/get OP_UNKNOWN210() {
      return 210;
    },
    /*txscript.OP_UNKNOWN211*/get OP_UNKNOWN211() {
      return 211;
    },
    /*txscript.OP_UNKNOWN212*/get OP_UNKNOWN212() {
      return 212;
    },
    /*txscript.OP_UNKNOWN213*/get OP_UNKNOWN213() {
      return 213;
    },
    /*txscript.OP_UNKNOWN214*/get OP_UNKNOWN214() {
      return 214;
    },
    /*txscript.OP_UNKNOWN215*/get OP_UNKNOWN215() {
      return 215;
    },
    /*txscript.OP_UNKNOWN216*/get OP_UNKNOWN216() {
      return 216;
    },
    /*txscript.OP_UNKNOWN217*/get OP_UNKNOWN217() {
      return 217;
    },
    /*txscript.OP_UNKNOWN218*/get OP_UNKNOWN218() {
      return 218;
    },
    /*txscript.OP_UNKNOWN219*/get OP_UNKNOWN219() {
      return 219;
    },
    /*txscript.OP_UNKNOWN220*/get OP_UNKNOWN220() {
      return 220;
    },
    /*txscript.OP_UNKNOWN221*/get OP_UNKNOWN221() {
      return 221;
    },
    /*txscript.OP_UNKNOWN222*/get OP_UNKNOWN222() {
      return 222;
    },
    /*txscript.OP_UNKNOWN223*/get OP_UNKNOWN223() {
      return 223;
    },
    /*txscript.OP_UNKNOWN224*/get OP_UNKNOWN224() {
      return 224;
    },
    /*txscript.OP_UNKNOWN225*/get OP_UNKNOWN225() {
      return 225;
    },
    /*txscript.OP_UNKNOWN226*/get OP_UNKNOWN226() {
      return 226;
    },
    /*txscript.OP_UNKNOWN227*/get OP_UNKNOWN227() {
      return 227;
    },
    /*txscript.OP_UNKNOWN228*/get OP_UNKNOWN228() {
      return 228;
    },
    /*txscript.OP_UNKNOWN229*/get OP_UNKNOWN229() {
      return 229;
    },
    /*txscript.OP_UNKNOWN230*/get OP_UNKNOWN230() {
      return 230;
    },
    /*txscript.OP_UNKNOWN231*/get OP_UNKNOWN231() {
      return 231;
    },
    /*txscript.OP_UNKNOWN232*/get OP_UNKNOWN232() {
      return 232;
    },
    /*txscript.OP_UNKNOWN233*/get OP_UNKNOWN233() {
      return 233;
    },
    /*txscript.OP_UNKNOWN234*/get OP_UNKNOWN234() {
      return 234;
    },
    /*txscript.OP_UNKNOWN235*/get OP_UNKNOWN235() {
      return 235;
    },
    /*txscript.OP_UNKNOWN236*/get OP_UNKNOWN236() {
      return 236;
    },
    /*txscript.OP_UNKNOWN237*/get OP_UNKNOWN237() {
      return 237;
    },
    /*txscript.OP_UNKNOWN238*/get OP_UNKNOWN238() {
      return 238;
    },
    /*txscript.OP_UNKNOWN239*/get OP_UNKNOWN239() {
      return 239;
    },
    /*txscript.OP_UNKNOWN240*/get OP_UNKNOWN240() {
      return 240;
    },
    /*txscript.OP_UNKNOWN241*/get OP_UNKNOWN241() {
      return 241;
    },
    /*txscript.OP_UNKNOWN242*/get OP_UNKNOWN242() {
      return 242;
    },
    /*txscript.OP_UNKNOWN243*/get OP_UNKNOWN243() {
      return 243;
    },
    /*txscript.OP_UNKNOWN244*/get OP_UNKNOWN244() {
      return 244;
    },
    /*txscript.OP_UNKNOWN245*/get OP_UNKNOWN245() {
      return 245;
    },
    /*txscript.OP_UNKNOWN246*/get OP_UNKNOWN246() {
      return 246;
    },
    /*txscript.OP_UNKNOWN247*/get OP_UNKNOWN247() {
      return 247;
    },
    /*txscript.OP_UNKNOWN248*/get OP_UNKNOWN248() {
      return 248;
    },
    /*txscript.OP_UNKNOWN249*/get OP_UNKNOWN249() {
      return 249;
    },
    /*txscript.OP_SMALLINTEGER*/get OP_SMALLINTEGER() {
      return 250;
    },
    /*txscript.OP_PUBKEYS*/get OP_PUBKEYS() {
      return 251;
    },
    /*txscript.OP_UNKNOWN252*/get OP_UNKNOWN252() {
      return 252;
    },
    /*txscript.OP_PUBKEYHASH*/get OP_PUBKEYHASH() {
      return 253;
    },
    /*txscript.OP_PUBKEY*/get OP_PUBKEY() {
      return 254;
    },
    /*txscript.OP_INVALIDOPCODE*/get OP_INVALIDOPCODE() {
      return 255;
    },
    /*txscript.OP_COND_FALSE*/get OP_COND_FALSE() {
      return 0;
    },
    /*txscript.OP_COND_TRUE*/get OP_COND_TRUE() {
      return 1;
    },
    /*txscript.OP_COND_SKIP*/get OP_COND_SKIP() {
      return 2;
    },
    /*txscript.opcodeArray*/get opcodeArray() {
      return new (T.IdentityMapOfintL$OpCodeL()).from([0, new txscript.OpCode.new({value: 0, name: "OP_0", length: 1}), 1, new txscript.OpCode.new({value: 1, name: "OP_DATA_1", length: 2}), 2, new txscript.OpCode.new({value: 2, name: "OP_DATA_2", length: 3}), 3, new txscript.OpCode.new({value: 3, name: "OP_DATA_3", length: 4}), 4, new txscript.OpCode.new({value: 4, name: "OP_DATA_4", length: 5}), 5, new txscript.OpCode.new({value: 5, name: "OP_DATA_5", length: 6}), 6, new txscript.OpCode.new({value: 6, name: "OP_DATA_6", length: 7}), 7, new txscript.OpCode.new({value: 7, name: "OP_DATA_7", length: 8}), 8, new txscript.OpCode.new({value: 8, name: "OP_DATA_8", length: 9}), 9, new txscript.OpCode.new({value: 9, name: "OP_DATA_9", length: 10}), 10, new txscript.OpCode.new({value: 10, name: "OP_DATA_10", length: 11}), 11, new txscript.OpCode.new({value: 11, name: "OP_DATA_11", length: 12}), 12, new txscript.OpCode.new({value: 12, name: "OP_DATA_12", length: 13}), 13, new txscript.OpCode.new({value: 13, name: "OP_DATA_13", length: 14}), 14, new txscript.OpCode.new({value: 14, name: "OP_DATA_14", length: 15}), 15, new txscript.OpCode.new({value: 15, name: "OP_DATA_15", length: 16}), 16, new txscript.OpCode.new({value: 16, name: "OP_DATA_16", length: 17}), 17, new txscript.OpCode.new({value: 17, name: "OP_DATA_17", length: 18}), 18, new txscript.OpCode.new({value: 18, name: "OP_DATA_18", length: 19}), 19, new txscript.OpCode.new({value: 19, name: "OP_DATA_19", length: 20}), 20, new txscript.OpCode.new({value: 20, name: "OP_DATA_20", length: 21}), 21, new txscript.OpCode.new({value: 21, name: "OP_DATA_21", length: 22}), 22, new txscript.OpCode.new({value: 22, name: "OP_DATA_22", length: 23}), 23, new txscript.OpCode.new({value: 23, name: "OP_DATA_23", length: 24}), 24, new txscript.OpCode.new({value: 24, name: "OP_DATA_24", length: 25}), 25, new txscript.OpCode.new({value: 25, name: "OP_DATA_25", length: 26}), 26, new txscript.OpCode.new({value: 26, name: "OP_DATA_26", length: 27}), 27, new txscript.OpCode.new({value: 27, name: "OP_DATA_27", length: 28}), 28, new txscript.OpCode.new({value: 28, name: "OP_DATA_28", length: 29}), 29, new txscript.OpCode.new({value: 29, name: "OP_DATA_29", length: 30}), 30, new txscript.OpCode.new({value: 30, name: "OP_DATA_30", length: 31}), 31, new txscript.OpCode.new({value: 31, name: "OP_DATA_31", length: 32}), 32, new txscript.OpCode.new({value: 32, name: "OP_DATA_32", length: 33}), 33, new txscript.OpCode.new({value: 33, name: "OP_DATA_33", length: 34}), 34, new txscript.OpCode.new({value: 34, name: "OP_DATA_34", length: 35}), 35, new txscript.OpCode.new({value: 35, name: "OP_DATA_35", length: 36}), 36, new txscript.OpCode.new({value: 36, name: "OP_DATA_36", length: 37}), 37, new txscript.OpCode.new({value: 37, name: "OP_DATA_37", length: 38}), 38, new txscript.OpCode.new({value: 38, name: "OP_DATA_38", length: 39}), 39, new txscript.OpCode.new({value: 39, name: "OP_DATA_39", length: 40}), 40, new txscript.OpCode.new({value: 40, name: "OP_DATA_40", length: 41}), 41, new txscript.OpCode.new({value: 41, name: "OP_DATA_41", length: 42}), 42, new txscript.OpCode.new({value: 42, name: "OP_DATA_42", length: 43}), 43, new txscript.OpCode.new({value: 43, name: "OP_DATA_43", length: 44}), 44, new txscript.OpCode.new({value: 44, name: "OP_DATA_44", length: 45}), 45, new txscript.OpCode.new({value: 45, name: "OP_DATA_45", length: 46}), 46, new txscript.OpCode.new({value: 46, name: "OP_DATA_46", length: 47}), 47, new txscript.OpCode.new({value: 47, name: "OP_DATA_47", length: 48}), 48, new txscript.OpCode.new({value: 48, name: "OP_DATA_48", length: 49}), 49, new txscript.OpCode.new({value: 49, name: "OP_DATA_49", length: 50}), 50, new txscript.OpCode.new({value: 50, name: "OP_DATA_50", length: 51}), 51, new txscript.OpCode.new({value: 51, name: "OP_DATA_51", length: 52}), 52, new txscript.OpCode.new({value: 52, name: "OP_DATA_52", length: 53}), 53, new txscript.OpCode.new({value: 53, name: "OP_DATA_53", length: 54}), 54, new txscript.OpCode.new({value: 54, name: "OP_DATA_54", length: 55}), 55, new txscript.OpCode.new({value: 55, name: "OP_DATA_55", length: 56}), 56, new txscript.OpCode.new({value: 56, name: "OP_DATA_56", length: 57}), 57, new txscript.OpCode.new({value: 57, name: "OP_DATA_57", length: 58}), 58, new txscript.OpCode.new({value: 58, name: "OP_DATA_58", length: 59}), 59, new txscript.OpCode.new({value: 59, name: "OP_DATA_59", length: 60}), 60, new txscript.OpCode.new({value: 60, name: "OP_DATA_60", length: 61}), 61, new txscript.OpCode.new({value: 61, name: "OP_DATA_61", length: 62}), 62, new txscript.OpCode.new({value: 62, name: "OP_DATA_62", length: 63}), 63, new txscript.OpCode.new({value: 63, name: "OP_DATA_63", length: 64}), 64, new txscript.OpCode.new({value: 64, name: "OP_DATA_64", length: 65}), 65, new txscript.OpCode.new({value: 65, name: "OP_DATA_65", length: 66}), 66, new txscript.OpCode.new({value: 66, name: "OP_DATA_66", length: 67}), 67, new txscript.OpCode.new({value: 67, name: "OP_DATA_67", length: 68}), 68, new txscript.OpCode.new({value: 68, name: "OP_DATA_68", length: 69}), 69, new txscript.OpCode.new({value: 69, name: "OP_DATA_69", length: 70}), 70, new txscript.OpCode.new({value: 70, name: "OP_DATA_70", length: 71}), 71, new txscript.OpCode.new({value: 71, name: "OP_DATA_71", length: 72}), 72, new txscript.OpCode.new({value: 72, name: "OP_DATA_72", length: 73}), 73, new txscript.OpCode.new({value: 73, name: "OP_DATA_73", length: 74}), 74, new txscript.OpCode.new({value: 74, name: "OP_DATA_74", length: 75}), 75, new txscript.OpCode.new({value: 75, name: "OP_DATA_75", length: 76}), 76, new txscript.OpCode.new({value: 76, name: "OP_PUSHDATA1", length: -1}), 77, new txscript.OpCode.new({value: 77, name: "OP_PUSHDATA2", length: -2}), 78, new txscript.OpCode.new({value: 78, name: "OP_PUSHDATA4", length: -4}), 79, new txscript.OpCode.new({value: 79, name: "OP_1NEGATE", length: 1}), 80, new txscript.OpCode.new({value: 80, name: "OP_RESERVED", length: 1}), 81, new txscript.OpCode.new({value: 81, name: "OP_1", length: 1}), 82, new txscript.OpCode.new({value: 82, name: "OP_2", length: 1}), 83, new txscript.OpCode.new({value: 83, name: "OP_3", length: 1}), 84, new txscript.OpCode.new({value: 84, name: "OP_4", length: 1}), 85, new txscript.OpCode.new({value: 85, name: "OP_5", length: 1}), 86, new txscript.OpCode.new({value: 86, name: "OP_6", length: 1}), 87, new txscript.OpCode.new({value: 87, name: "OP_7", length: 1}), 88, new txscript.OpCode.new({value: 88, name: "OP_8", length: 1}), 89, new txscript.OpCode.new({value: 89, name: "OP_9", length: 1}), 90, new txscript.OpCode.new({value: 90, name: "OP_10", length: 1}), 91, new txscript.OpCode.new({value: 91, name: "OP_11", length: 1}), 92, new txscript.OpCode.new({value: 92, name: "OP_12", length: 1}), 93, new txscript.OpCode.new({value: 93, name: "OP_13", length: 1}), 94, new txscript.OpCode.new({value: 94, name: "OP_14", length: 1}), 95, new txscript.OpCode.new({value: 95, name: "OP_15", length: 1}), 96, new txscript.OpCode.new({value: 96, name: "OP_16", length: 1}), 97, new txscript.OpCode.new({value: 97, name: "OP_NOP", length: 1}), 98, new txscript.OpCode.new({value: 98, name: "OP_VER", length: 1}), 99, new txscript.OpCode.new({value: 99, name: "OP_IF", length: 1}), 100, new txscript.OpCode.new({value: 100, name: "OP_NOTIF", length: 1}), 101, new txscript.OpCode.new({value: 101, name: "OP_VERIF", length: 1}), 102, new txscript.OpCode.new({value: 102, name: "OP_VERNOTIF", length: 1}), 103, new txscript.OpCode.new({value: 103, name: "OP_ELSE", length: 1}), 104, new txscript.OpCode.new({value: 104, name: "OP_ENDIF", length: 1}), 105, new txscript.OpCode.new({value: 105, name: "OP_VERIFY", length: 1}), 106, new txscript.OpCode.new({value: 106, name: "OP_RETURN", length: 1}), 177, new txscript.OpCode.new({value: 177, name: "OP_CHECKLOCKTIMEVERIFY", length: 1}), 178, new txscript.OpCode.new({value: 178, name: "OP_CHECKSEQUENCEVERIFY", length: 1}), 107, new txscript.OpCode.new({value: 107, name: "OP_TOALTSTACK", length: 1}), 108, new txscript.OpCode.new({value: 108, name: "OP_FROMALTSTACK", length: 1}), 109, new txscript.OpCode.new({value: 109, name: "OP_2DROP", length: 1}), 110, new txscript.OpCode.new({value: 110, name: "OP_2DUP", length: 1}), 111, new txscript.OpCode.new({value: 111, name: "OP_3DUP", length: 1}), 112, new txscript.OpCode.new({value: 112, name: "OP_2OVER", length: 1}), 113, new txscript.OpCode.new({value: 113, name: "OP_2ROT", length: 1}), 114, new txscript.OpCode.new({value: 114, name: "OP_2SWAP", length: 1}), 115, new txscript.OpCode.new({value: 115, name: "OP_IFDUP", length: 1}), 116, new txscript.OpCode.new({value: 116, name: "OP_DEPTH", length: 1}), 117, new txscript.OpCode.new({value: 117, name: "OP_DROP", length: 1}), 118, new txscript.OpCode.new({value: 118, name: "OP_DUP", length: 1}), 119, new txscript.OpCode.new({value: 119, name: "OP_NIP", length: 1}), 120, new txscript.OpCode.new({value: 120, name: "OP_OVER", length: 1}), 121, new txscript.OpCode.new({value: 121, name: "OP_PICK", length: 1}), 122, new txscript.OpCode.new({value: 122, name: "OP_ROLL", length: 1}), 123, new txscript.OpCode.new({value: 123, name: "OP_ROT", length: 1}), 124, new txscript.OpCode.new({value: 124, name: "OP_SWAP", length: 1}), 125, new txscript.OpCode.new({value: 125, name: "OP_TUCK", length: 1}), 126, new txscript.OpCode.new({value: 126, name: "OP_CAT", length: 1}), 127, new txscript.OpCode.new({value: 127, name: "OP_SUBSTR", length: 1}), 128, new txscript.OpCode.new({value: 128, name: "OP_LEFT", length: 1}), 129, new txscript.OpCode.new({value: 129, name: "OP_RIGHT", length: 1}), 130, new txscript.OpCode.new({value: 130, name: "OP_SIZE", length: 1}), 131, new txscript.OpCode.new({value: 131, name: "OP_INVERT", length: 1}), 132, new txscript.OpCode.new({value: 132, name: "OP_AND", length: 1}), 133, new txscript.OpCode.new({value: 133, name: "OP_OR", length: 1}), 134, new txscript.OpCode.new({value: 134, name: "OP_XOR", length: 1}), 135, new txscript.OpCode.new({value: 135, name: "OP_EQUAL", length: 1}), 136, new txscript.OpCode.new({value: 136, name: "OP_EQUALVERIFY", length: 1}), 137, new txscript.OpCode.new({value: 137, name: "OP_RESERVED1", length: 1}), 138, new txscript.OpCode.new({value: 138, name: "OP_RESERVED2", length: 1}), 139, new txscript.OpCode.new({value: 139, name: "OP_1ADD", length: 1}), 140, new txscript.OpCode.new({value: 140, name: "OP_1SUB", length: 1}), 141, new txscript.OpCode.new({value: 141, name: "OP_2MUL", length: 1}), 142, new txscript.OpCode.new({value: 142, name: "OP_2DIV", length: 1}), 143, new txscript.OpCode.new({value: 143, name: "OP_NEGATE", length: 1}), 144, new txscript.OpCode.new({value: 144, name: "OP_ABS", length: 1}), 145, new txscript.OpCode.new({value: 145, name: "OP_NOT", length: 1}), 146, new txscript.OpCode.new({value: 146, name: "OP_0NOTEQUAL", length: 1}), 147, new txscript.OpCode.new({value: 147, name: "OP_ADD", length: 1}), 148, new txscript.OpCode.new({value: 148, name: "OP_SUB", length: 1}), 149, new txscript.OpCode.new({value: 149, name: "OP_MUL", length: 1}), 150, new txscript.OpCode.new({value: 150, name: "OP_DIV", length: 1}), 151, new txscript.OpCode.new({value: 151, name: "OP_MOD", length: 1}), 152, new txscript.OpCode.new({value: 152, name: "OP_LSHIFT", length: 1}), 153, new txscript.OpCode.new({value: 153, name: "OP_RSHIFT", length: 1}), 154, new txscript.OpCode.new({value: 154, name: "OP_BOOLAND", length: 1}), 155, new txscript.OpCode.new({value: 155, name: "OP_BOOLOR", length: 1}), 156, new txscript.OpCode.new({value: 156, name: "OP_NUMEQUAL", length: 1}), 157, new txscript.OpCode.new({value: 157, name: "OP_NUMEQUALVERIFY", length: 1}), 158, new txscript.OpCode.new({value: 158, name: "OP_NUMNOTEQUAL", length: 1}), 159, new txscript.OpCode.new({value: 159, name: "OP_LESSTHAN", length: 1}), 160, new txscript.OpCode.new({value: 160, name: "OP_GREATERTHAN", length: 1}), 161, new txscript.OpCode.new({value: 161, name: "OP_LESSTHANOREQUAL", length: 1}), 162, new txscript.OpCode.new({value: 162, name: "OP_GREATERTHANOREQUAL", length: 1}), 163, new txscript.OpCode.new({value: 163, name: "OP_MIN", length: 1}), 164, new txscript.OpCode.new({value: 164, name: "OP_MAX", length: 1}), 165, new txscript.OpCode.new({value: 165, name: "OP_WITHIN", length: 1}), 166, new txscript.OpCode.new({value: 166, name: "OP_RIPEMD160", length: 1}), 167, new txscript.OpCode.new({value: 167, name: "OP_SHA1", length: 1}), 168, new txscript.OpCode.new({value: 168, name: "OP_SHA256", length: 1}), 169, new txscript.OpCode.new({value: 169, name: "OP_HASH160", length: 1}), 170, new txscript.OpCode.new({value: 170, name: "OP_HASH256", length: 1}), 171, new txscript.OpCode.new({value: 171, name: "OP_CODESEPARATOR", length: 1}), 172, new txscript.OpCode.new({value: 172, name: "OP_CHECKSIG", length: 1}), 173, new txscript.OpCode.new({value: 173, name: "OP_CHECKSIGVERIFY", length: 1}), 174, new txscript.OpCode.new({value: 174, name: "OP_CHECKMULTISIG", length: 1}), 175, new txscript.OpCode.new({value: 175, name: "OP_CHECKMULTISIGVERIFY", length: 1}), 176, new txscript.OpCode.new({value: 176, name: "OP_NOP1", length: 1}), 179, new txscript.OpCode.new({value: 179, name: "OP_NOP4", length: 1}), 180, new txscript.OpCode.new({value: 180, name: "OP_NOP5", length: 1}), 181, new txscript.OpCode.new({value: 181, name: "OP_NOP6", length: 1}), 182, new txscript.OpCode.new({value: 182, name: "OP_NOP7", length: 1}), 183, new txscript.OpCode.new({value: 183, name: "OP_NOP8", length: 1}), 184, new txscript.OpCode.new({value: 184, name: "OP_NOP9", length: 1}), 185, new txscript.OpCode.new({value: 185, name: "OP_NOP10", length: 1}), 186, new txscript.OpCode.new({value: 186, name: "OP_UNKNOWN186", length: 1}), 187, new txscript.OpCode.new({value: 187, name: "OP_UNKNOWN187", length: 1}), 188, new txscript.OpCode.new({value: 188, name: "OP_UNKNOWN188", length: 1}), 189, new txscript.OpCode.new({value: 189, name: "OP_UNKNOWN189", length: 1}), 190, new txscript.OpCode.new({value: 190, name: "OP_UNKNOWN190", length: 1}), 191, new txscript.OpCode.new({value: 191, name: "OP_UNKNOWN191", length: 1}), 192, new txscript.OpCode.new({value: 192, name: "OP_UNKNOWN192", length: 1}), 193, new txscript.OpCode.new({value: 193, name: "OP_UNKNOWN193", length: 1}), 194, new txscript.OpCode.new({value: 194, name: "OP_UNKNOWN194", length: 1}), 195, new txscript.OpCode.new({value: 195, name: "OP_UNKNOWN195", length: 1}), 196, new txscript.OpCode.new({value: 196, name: "OP_UNKNOWN196", length: 1}), 197, new txscript.OpCode.new({value: 197, name: "OP_UNKNOWN197", length: 1}), 198, new txscript.OpCode.new({value: 198, name: "OP_UNKNOWN198", length: 1}), 199, new txscript.OpCode.new({value: 199, name: "OP_UNKNOWN199", length: 1}), 200, new txscript.OpCode.new({value: 200, name: "OP_UNKNOWN200", length: 1}), 201, new txscript.OpCode.new({value: 201, name: "OP_UNKNOWN201", length: 1}), 202, new txscript.OpCode.new({value: 202, name: "OP_UNKNOWN202", length: 1}), 203, new txscript.OpCode.new({value: 203, name: "OP_UNKNOWN203", length: 1}), 204, new txscript.OpCode.new({value: 204, name: "OP_UNKNOWN204", length: 1}), 205, new txscript.OpCode.new({value: 205, name: "OP_UNKNOWN205", length: 1}), 206, new txscript.OpCode.new({value: 206, name: "OP_UNKNOWN206", length: 1}), 207, new txscript.OpCode.new({value: 207, name: "OP_UNKNOWN207", length: 1}), 208, new txscript.OpCode.new({value: 208, name: "OP_UNKNOWN208", length: 1}), 209, new txscript.OpCode.new({value: 209, name: "OP_UNKNOWN209", length: 1}), 210, new txscript.OpCode.new({value: 210, name: "OP_UNKNOWN210", length: 1}), 211, new txscript.OpCode.new({value: 211, name: "OP_UNKNOWN211", length: 1}), 212, new txscript.OpCode.new({value: 212, name: "OP_UNKNOWN212", length: 1}), 213, new txscript.OpCode.new({value: 213, name: "OP_UNKNOWN213", length: 1}), 214, new txscript.OpCode.new({value: 214, name: "OP_UNKNOWN214", length: 1}), 215, new txscript.OpCode.new({value: 215, name: "OP_UNKNOWN215", length: 1}), 216, new txscript.OpCode.new({value: 216, name: "OP_UNKNOWN216", length: 1}), 217, new txscript.OpCode.new({value: 217, name: "OP_UNKNOWN217", length: 1}), 218, new txscript.OpCode.new({value: 218, name: "OP_UNKNOWN218", length: 1}), 219, new txscript.OpCode.new({value: 219, name: "OP_UNKNOWN219", length: 1}), 220, new txscript.OpCode.new({value: 220, name: "OP_UNKNOWN220", length: 1}), 221, new txscript.OpCode.new({value: 221, name: "OP_UNKNOWN221", length: 1}), 222, new txscript.OpCode.new({value: 222, name: "OP_UNKNOWN222", length: 1}), 223, new txscript.OpCode.new({value: 223, name: "OP_UNKNOWN223", length: 1}), 224, new txscript.OpCode.new({value: 224, name: "OP_UNKNOWN224", length: 1}), 225, new txscript.OpCode.new({value: 225, name: "OP_UNKNOWN225", length: 1}), 226, new txscript.OpCode.new({value: 226, name: "OP_UNKNOWN226", length: 1}), 227, new txscript.OpCode.new({value: 227, name: "OP_UNKNOWN227", length: 1}), 228, new txscript.OpCode.new({value: 228, name: "OP_UNKNOWN228", length: 1}), 229, new txscript.OpCode.new({value: 229, name: "OP_UNKNOWN229", length: 1}), 230, new txscript.OpCode.new({value: 230, name: "OP_UNKNOWN230", length: 1}), 231, new txscript.OpCode.new({value: 231, name: "OP_UNKNOWN231", length: 1}), 232, new txscript.OpCode.new({value: 232, name: "OP_UNKNOWN232", length: 1}), 233, new txscript.OpCode.new({value: 233, name: "OP_UNKNOWN233", length: 1}), 234, new txscript.OpCode.new({value: 234, name: "OP_UNKNOWN234", length: 1}), 235, new txscript.OpCode.new({value: 235, name: "OP_UNKNOWN235", length: 1}), 236, new txscript.OpCode.new({value: 236, name: "OP_UNKNOWN236", length: 1}), 237, new txscript.OpCode.new({value: 237, name: "OP_UNKNOWN237", length: 1}), 238, new txscript.OpCode.new({value: 238, name: "OP_UNKNOWN238", length: 1}), 239, new txscript.OpCode.new({value: 239, name: "OP_UNKNOWN239", length: 1}), 240, new txscript.OpCode.new({value: 240, name: "OP_UNKNOWN240", length: 1}), 241, new txscript.OpCode.new({value: 241, name: "OP_UNKNOWN241", length: 1}), 242, new txscript.OpCode.new({value: 242, name: "OP_UNKNOWN242", length: 1}), 243, new txscript.OpCode.new({value: 243, name: "OP_UNKNOWN243", length: 1}), 244, new txscript.OpCode.new({value: 244, name: "OP_UNKNOWN244", length: 1}), 245, new txscript.OpCode.new({value: 245, name: "OP_UNKNOWN245", length: 1}), 246, new txscript.OpCode.new({value: 246, name: "OP_UNKNOWN246", length: 1}), 247, new txscript.OpCode.new({value: 247, name: "OP_UNKNOWN247", length: 1}), 248, new txscript.OpCode.new({value: 248, name: "OP_UNKNOWN248", length: 1}), 249, new txscript.OpCode.new({value: 249, name: "OP_UNKNOWN249", length: 1}), 250, new txscript.OpCode.new({value: 250, name: "OP_SMALLINTEGER", length: 1}), 251, new txscript.OpCode.new({value: 251, name: "OP_PUBKEYS", length: 1}), 252, new txscript.OpCode.new({value: 252, name: "OP_UNKNOWN252", length: 1}), 253, new txscript.OpCode.new({value: 253, name: "OP_PUBKEYHASH", length: 1}), 254, new txscript.OpCode.new({value: 254, name: "OP_PUBKEY", length: 1}), 255, new txscript.OpCode.new({value: 255, name: "OP_INVALIDOPCODE", length: 1})]);
    },
    set opcodeArray(_) {},
    /*txscript.opcodeOnelineRepls*/get opcodeOnelineRepls() {
      return new (T.IdentityMapOfStringL$StringL()).from(["OP_1NEGATE", "-1", "OP_0", "0", "OP_1", "1", "OP_2", "2", "OP_3", "3", "OP_4", "4", "OP_5", "5", "OP_6", "6", "OP_7", "7", "OP_8", "8", "OP_9", "9", "OP_10", "10", "OP_11", "11", "OP_12", "12", "OP_13", "13", "OP_14", "14", "OP_15", "15", "OP_16", "16"]);
    },
    set opcodeOnelineRepls(_) {},
    /*txscript.MAX_SCRIPT_ELEMENT_SIZE*/get MAX_SCRIPT_ELEMENT_SIZE() {
      return 2048;
    },
    /*txscript.MAX_DATA_CARRIER_SIZE*/get MAX_DATA_CARRIER_SIZE() {
      return 256;
    },
    /*txscript.NON_STANDARD_TY*/get NON_STANDARD_TY() {
      return 0;
    },
    /*txscript.PUB_KEY_TY*/get PUB_KEY_TY() {
      return 1;
    },
    /*txscript.PUB_KEY_HASH_TY*/get PUB_KEY_HASH_TY() {
      return 2;
    },
    /*txscript.WITNESS_V0_PUB_KEY_HASH_TY*/get WITNESS_V0_PUB_KEY_HASH_TY() {
      return 3;
    },
    /*txscript.SCRIPT_HASH_TY*/get SCRIPT_HASH_TY() {
      return 4;
    },
    /*txscript.WITNESS_V0_SCRIPT_HASH_TY*/get WITNESS_V0_SCRIPT_HASH_TY() {
      return 5;
    },
    /*txscript.NULL_DATA_TY*/get NULL_DATA_TY() {
      return 7;
    },
    /*txscript.MAX_STACK_SIZE*/get MAX_STACK_SIZE() {
      return 1024;
    },
    /*txscript.MAX_SCRIPT_SIZE*/get MAX_SCRIPT_SIZE() {
      return 16384;
    },
    /*txscript.DEFAULT_SCRIPT_VERSION*/get DEFAULT_SCRIPT_VERSION() {
      return 0;
    },
    /*txscript.SIG_HASH_ALL*/get SIG_HASH_ALL() {
      return 1;
    },
    /*txscript.SIG_HASH_NONE*/get SIG_HASH_NONE() {
      return 2;
    },
    /*txscript.SIG_HASH_SINGLE*/get SIG_HASH_SINGLE() {
      return 3;
    },
    /*txscript.SIG_HASH_ANY_ONE_CAN_PAY*/get SIG_HASH_ANY_ONE_CAN_PAY() {
      return 128;
    },
    /*txscript.SIG_HASH_MASK*/get SIG_HASH_MASK() {
      return 31;
    }
  }, true);
  var txid$ = dart.privateName(transaction, "Utxo.txid");
  var vout$ = dart.privateName(transaction, "Utxo.vout");
  var amount$0 = dart.privateName(transaction, "Utxo.amount");
  var pubKey$ = dart.privateName(transaction, "Utxo.pubKey");
  transaction.Utxo = class Utxo extends core.Object {
    get txid() {
      return this[txid$];
    }
    set txid(value) {
      this[txid$] = value;
    }
    get vout() {
      return this[vout$];
    }
    set vout(value) {
      this[vout$] = value;
    }
    get amount() {
      return this[amount$0];
    }
    set amount(value) {
      this[amount$0] = value;
    }
    get pubKey() {
      return this[pubKey$];
    }
    set pubKey(value) {
      this[pubKey$] = value;
    }
  };
  (transaction.Utxo.new = function(opts) {
    let txid = opts && 'txid' in opts ? opts.txid : null;
    let vout = opts && 'vout' in opts ? opts.vout : null;
    let amount = opts && 'amount' in opts ? opts.amount : null;
    let pubKey = opts && 'pubKey' in opts ? opts.pubKey : null;
    this[txid$] = txid;
    this[vout$] = vout;
    this[amount$0] = amount;
    this[pubKey$] = pubKey;
    ;
  }).prototype = transaction.Utxo.prototype;
  (transaction.Utxo.fromJSON = function(json) {
    this[pubKey$] = null;
    this[amount$0] = null;
    this[vout$] = null;
    this[txid$] = null;
    this.txid = new chainhash.Hash.fromString(T.StringL().as(json[$_get]("txid")));
    this.vout = T.intL().as(json[$_get]("vout"));
    this.amount = new utils$.Amount.new(core.BigInt.parse(dart.toString(json[$_get]("amount"))));
    this.pubKey = utils$.hexToBytes(T.StringL().as(json[$_get]("pubKey")));
  }).prototype = transaction.Utxo.prototype;
  dart.addTypeTests(transaction.Utxo);
  dart.addTypeCaches(transaction.Utxo);
  dart.setLibraryUri(transaction.Utxo, I[5]);
  dart.setFieldSignature(transaction.Utxo, () => ({
    __proto__: dart.getFields(transaction.Utxo.__proto__),
    txid: dart.fieldType(dart.legacy(chainhash.Hash)),
    vout: dart.fieldType(dart.legacy(core.int)),
    amount: dart.fieldType(dart.legacy(utils$.Amount)),
    pubKey: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  var previousOutPoint$ = dart.privateName(transaction, "TxIn.previousOutPoint");
  var sequence$ = dart.privateName(transaction, "TxIn.sequence");
  var signatureScript$ = dart.privateName(transaction, "TxIn.signatureScript");
  var witness$ = dart.privateName(transaction, "TxIn.witness");
  transaction.TxIn = class TxIn extends core.Object {
    get previousOutPoint() {
      return this[previousOutPoint$];
    }
    set previousOutPoint(value) {
      this[previousOutPoint$] = value;
    }
    get sequence() {
      return this[sequence$];
    }
    set sequence(value) {
      this[sequence$] = value;
    }
    get signatureScript() {
      return this[signatureScript$];
    }
    set signatureScript(value) {
      this[signatureScript$] = value;
    }
    get witness() {
      return this[witness$];
    }
    set witness(value) {
      this[witness$] = value;
    }
    serializeSize() {
      return 40 + dart.notNull(transaction.varIntSerializeSize(this.signatureScript[$length])) + dart.notNull(this.signatureScript[$length]);
    }
    serializeSizeWitness() {
      let n = transaction.varIntSerializeSize(this.witness[$length]);
      for (let i = 0; i < dart.notNull(this.witness[$length]); i = i + 1) {
        n = dart.notNull(n) + dart.notNull(transaction.varIntSerializeSize(this.witness[$_get](i)[$length]));
        n = dart.notNull(n) + dart.notNull(this.witness[$_get](i)[$length]);
      }
      return n;
    }
  };
  (transaction.TxIn.new = function(opts) {
    let t7, t7$, t7$0, t7$1;
    let previousOutPoint = opts && 'previousOutPoint' in opts ? opts.previousOutPoint : null;
    let sequence = opts && 'sequence' in opts ? opts.sequence : null;
    let witness = opts && 'witness' in opts ? opts.witness : null;
    let signatureScript = opts && 'signatureScript' in opts ? opts.signatureScript : null;
    this[sequence$] = null;
    this[signatureScript$] = null;
    this[witness$] = null;
    this[previousOutPoint$] = previousOutPoint;
    this.witness = (t7 = witness, t7 == null ? T.JSArrayOfUint8ListL().of([]) : t7);
    this.sequence = (t7$ = sequence, t7$ == null ? 4294967295.0 : t7$);
    this.signatureScript = dart.test((t7$1 = (t7$0 = signatureScript, t7$0 == null ? null : t7$0[$isEmpty]), t7$1 == null ? true : t7$1)) ? _native_typed_data.NativeUint8List.new(0) : signatureScript;
  }).prototype = transaction.TxIn.prototype;
  dart.addTypeTests(transaction.TxIn);
  dart.addTypeCaches(transaction.TxIn);
  dart.setMethodSignature(transaction.TxIn, () => ({
    __proto__: dart.getMethods(transaction.TxIn.__proto__),
    serializeSize: dart.fnType(dart.legacy(core.int), []),
    serializeSizeWitness: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setLibraryUri(transaction.TxIn, I[5]);
  dart.setFieldSignature(transaction.TxIn, () => ({
    __proto__: dart.getFields(transaction.TxIn.__proto__),
    previousOutPoint: dart.fieldType(dart.legacy(transaction.OutPoint)),
    sequence: dart.fieldType(dart.legacy(core.int)),
    signatureScript: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    witness: dart.fieldType(dart.legacy(core.List$(dart.legacy(typed_data.Uint8List))))
  }));
  var value$0 = dart.privateName(transaction, "TxOut.value");
  var pkScript$ = dart.privateName(transaction, "TxOut.pkScript");
  transaction.TxOut = class TxOut extends core.Object {
    get value() {
      return this[value$0];
    }
    set value(value) {
      this[value$0] = value;
    }
    get pkScript() {
      return this[pkScript$];
    }
    set pkScript(value) {
      this[pkScript$] = value;
    }
    serializeSize() {
      return 8 + dart.notNull(transaction.varIntSerializeSize(this.pkScript[$length])) + dart.notNull(this.pkScript[$length]);
    }
  };
  (transaction.TxOut.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let pkScript = opts && 'pkScript' in opts ? opts.pkScript : null;
    this[value$0] = value;
    this[pkScript$] = pkScript;
    ;
  }).prototype = transaction.TxOut.prototype;
  dart.addTypeTests(transaction.TxOut);
  dart.addTypeCaches(transaction.TxOut);
  dart.setMethodSignature(transaction.TxOut, () => ({
    __proto__: dart.getMethods(transaction.TxOut.__proto__),
    serializeSize: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setLibraryUri(transaction.TxOut, I[5]);
  dart.setFieldSignature(transaction.TxOut, () => ({
    __proto__: dart.getFields(transaction.TxOut.__proto__),
    value: dart.fieldType(dart.legacy(utils$.Amount)),
    pkScript: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  var hash$ = dart.privateName(transaction, "OutPoint.hash");
  var index$0 = dart.privateName(transaction, "OutPoint.index");
  transaction.OutPoint = class OutPoint extends core.Object {
    get hash() {
      return this[hash$];
    }
    set hash(value) {
      super.hash = value;
    }
    get index() {
      return this[index$0];
    }
    set index(value) {
      super.index = value;
    }
    get length() {
      return dart.notNull(this.hash.length) + 4;
    }
    toString() {
      return dart.str(dart.toString(this.hash)) + ":" + dart.str(this.index);
    }
  };
  (transaction.OutPoint.new = function(opts) {
    let hash = opts && 'hash' in opts ? opts.hash : null;
    let index = opts && 'index' in opts ? opts.index : null;
    this[hash$] = hash;
    this[index$0] = index;
    ;
  }).prototype = transaction.OutPoint.prototype;
  dart.addTypeTests(transaction.OutPoint);
  dart.addTypeCaches(transaction.OutPoint);
  dart.setMethodSignature(transaction.OutPoint, () => ({
    __proto__: dart.getMethods(transaction.OutPoint.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(transaction.OutPoint, () => ({
    __proto__: dart.getGetters(transaction.OutPoint.__proto__),
    length: dart.legacy(core.int)
  }));
  dart.setLibraryUri(transaction.OutPoint, I[5]);
  dart.setFieldSignature(transaction.OutPoint, () => ({
    __proto__: dart.getFields(transaction.OutPoint.__proto__),
    hash: dart.finalFieldType(dart.legacy(chainhash.Hash)),
    index: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(transaction.OutPoint, ['toString']);
  var source$ = dart.privateName(transaction, "InputSource.source");
  transaction.InputSource = class InputSource extends core.Object {
    get source() {
      return this[source$];
    }
    set source(value) {
      super.source = value;
    }
    selectInputs(target) {
      let t7;
      t7 = target;
      return this.source(t7);
    }
  };
  (transaction.InputSource.new = function(source) {
    this[source$] = source;
    ;
  }).prototype = transaction.InputSource.prototype;
  dart.addTypeTests(transaction.InputSource);
  dart.addTypeCaches(transaction.InputSource);
  dart.setMethodSignature(transaction.InputSource, () => ({
    __proto__: dart.getMethods(transaction.InputSource.__proto__),
    selectInputs: dart.fnType(dart.legacy(transaction.InputDetail), [dart.legacy(utils$.Amount)])
  }));
  dart.setLibraryUri(transaction.InputSource, I[5]);
  dart.setFieldSignature(transaction.InputSource, () => ({
    __proto__: dart.getFields(transaction.InputSource.__proto__),
    source: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(transaction.InputDetail), [dart.legacy(utils$.Amount)])))
  }));
  var amount$1 = dart.privateName(transaction, "InputDetail.amount");
  var inputs$ = dart.privateName(transaction, "InputDetail.inputs");
  var inputValues$ = dart.privateName(transaction, "InputDetail.inputValues");
  var scripts$ = dart.privateName(transaction, "InputDetail.scripts");
  var redeemScriptSizes$ = dart.privateName(transaction, "InputDetail.redeemScriptSizes");
  transaction.InputDetail = class InputDetail extends core.Object {
    get amount() {
      return this[amount$1];
    }
    set amount(value) {
      super.amount = value;
    }
    get inputs() {
      return this[inputs$];
    }
    set inputs(value) {
      super.inputs = value;
    }
    get inputValues() {
      return this[inputValues$];
    }
    set inputValues(value) {
      super.inputValues = value;
    }
    get scripts() {
      return this[scripts$];
    }
    set scripts(value) {
      super.scripts = value;
    }
    get redeemScriptSizes() {
      return this[redeemScriptSizes$];
    }
    set redeemScriptSizes(value) {
      super.redeemScriptSizes = value;
    }
  };
  (transaction.InputDetail.new = function(opts) {
    let amount = opts && 'amount' in opts ? opts.amount : null;
    let inputs = opts && 'inputs' in opts ? opts.inputs : null;
    let scripts = opts && 'scripts' in opts ? opts.scripts : null;
    let redeemScriptSizes = opts && 'redeemScriptSizes' in opts ? opts.redeemScriptSizes : null;
    let inputValues = opts && 'inputValues' in opts ? opts.inputValues : null;
    this[amount$1] = amount;
    this[inputs$] = inputs;
    this[scripts$] = scripts;
    this[redeemScriptSizes$] = redeemScriptSizes;
    this[inputValues$] = inputValues;
    ;
  }).prototype = transaction.InputDetail.prototype;
  dart.addTypeTests(transaction.InputDetail);
  dart.addTypeCaches(transaction.InputDetail);
  dart.setLibraryUri(transaction.InputDetail, I[5]);
  dart.setFieldSignature(transaction.InputDetail, () => ({
    __proto__: dart.getFields(transaction.InputDetail.__proto__),
    amount: dart.finalFieldType(dart.legacy(utils$.Amount)),
    inputs: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(transaction.TxIn)))),
    inputValues: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(utils$.Amount)))),
    scripts: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(typed_data.Uint8List)))),
    redeemScriptSizes: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  var _utxos = dart.privateName(transaction, "_utxos");
  transaction.Store = class Store extends core.Object {
    put(utxo) {
      this[_utxos][$add](utxo);
    }
    makeInputSource() {
      if (dart.test(this[_utxos][$isEmpty])) {
        dart.throw(new core.FormatException.new("Utxo is empty."));
      }
      let currentTotal = new utils$.Amount.new(core.BigInt.zero);
      let currentInputs = T.JSArrayOfTxInL().of([]);
      let inputValues = T.JSArrayOfAmountL().of([]);
      let currentScripts = T.JSArrayOfUint8ListL().of([]);
      return new transaction.InputSource.new(dart.fn(target => {
        for (let i = 0; i < dart.notNull(this[_utxos][$length]); i = i + 1) {
          let utxo = this[_utxos][$_get](i);
          let amt = utxo.amount;
          let pkScript = utxo.pubKey;
          let hash = utxo.txid;
          inputValues[$add](amt);
          let txIn = new transaction.TxIn.new({previousOutPoint: new transaction.OutPoint.new({hash: hash, index: utxo.vout})});
          currentTotal = currentTotal['+'](amt);
          currentScripts[$add](pkScript);
          currentInputs[$add](txIn);
        }
        this[_utxos][$clear]();
        return new transaction.InputDetail.new({amount: currentTotal, inputs: currentInputs, inputValues: inputValues, scripts: currentScripts});
      }, T.AmountLToInputDetailL()));
    }
  };
  (transaction.Store.new = function() {
    this[_utxos] = T.JSArrayOfUtxoL().of([]);
    ;
  }).prototype = transaction.Store.prototype;
  dart.addTypeTests(transaction.Store);
  dart.addTypeCaches(transaction.Store);
  dart.setMethodSignature(transaction.Store, () => ({
    __proto__: dart.getMethods(transaction.Store.__proto__),
    put: dart.fnType(dart.void, [dart.legacy(transaction.Utxo)]),
    makeInputSource: dart.fnType(dart.legacy(transaction.InputSource), [])
  }));
  dart.setLibraryUri(transaction.Store, I[5]);
  dart.setFieldSignature(transaction.Store, () => ({
    __proto__: dart.getFields(transaction.Store.__proto__),
    [_utxos]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(transaction.Utxo))))
  }));
  var version$ = dart.privateName(transaction, "MsgTx.version");
  var txIn$ = dart.privateName(transaction, "MsgTx.txIn");
  var txOut$ = dart.privateName(transaction, "MsgTx.txOut");
  var lockTime$ = dart.privateName(transaction, "MsgTx.lockTime");
  var _baseSize = dart.privateName(transaction, "_baseSize");
  transaction.MsgTx = class MsgTx extends core.Object {
    get version() {
      return this[version$];
    }
    set version(value) {
      this[version$] = value;
    }
    get txIn() {
      return this[txIn$];
    }
    set txIn(value) {
      this[txIn$] = value;
    }
    get txOut() {
      return this[txOut$];
    }
    set txOut(value) {
      this[txOut$] = value;
    }
    get lockTime() {
      return this[lockTime$];
    }
    set lockTime(value) {
      this[lockTime$] = value;
    }
    addTxIn(ti) {
      this.txIn[$add](ti);
    }
    addTxOut(to) {
      this.txOut[$add](to);
    }
    serializeSizeStripped() {
      return this[_baseSize]();
    }
    [_baseSize]() {
      let n = 8 + dart.notNull(transaction.varIntSerializeSize(this.txIn[$length])) + dart.notNull(transaction.varIntSerializeSize(this.txOut[$length]));
      for (let i = 0; i < dart.notNull(this.txIn[$length]); i = i + 1) {
        n = n + dart.notNull(this.txIn[$_get](i).serializeSize());
      }
      for (let i = 0; i < dart.notNull(this.txOut[$length]); i = i + 1) {
        n = n + dart.notNull(this.txOut[$_get](i).serializeSize());
      }
      return n;
    }
    hasWitness() {
      let t7, t7$;
      for (let i = 0; i < dart.notNull(this.txIn[$length]); i = i + 1) {
        if (dart.test((t7$ = (t7 = this.txIn[$_get](i).witness, t7 == null ? null : t7[$isNotEmpty]), t7$ == null ? false : t7$))) {
          return true;
        }
      }
      return false;
    }
    serializeSize() {
      let n = this[_baseSize]();
      if (dart.test(this.hasWitness())) {
        n = dart.notNull(n) + 2;
        for (let i = 0; i < dart.notNull(this.txIn[$length]); i = i + 1) {
          n = dart.notNull(n) + dart.notNull(this.txIn[$_get](i).serializeSizeWitness());
        }
      }
      return n;
    }
    decode(buf, offset = 0, enc = 2) {
      this.version = buf[$getUint32](offset, typed_data.Endian.little);
      offset = dart.notNull(offset) + 4;
      let data = transaction.readVarInt(buf, offset);
      let count = data[$_get](0);
      offset = data[$_get](1);
      let flag = 0;
      if (count === 0) {
        flag = buf[$getUint8](offset);
        offset = dart.notNull(offset) + 1;
        if (flag !== 1) {
          dart.throw(new core.FormatException.new("MsgTx.BtcDecode: witness tx but flag byte is " + dart.str(flag)));
        }
        data = transaction.readVarInt(buf, offset);
        count = data[$_get](0);
        offset = data[$_get](1);
      }
      if (dart.notNull(count) > 780336) {
        dart.throw(new core.FormatException.new("MsgTx.BtcDecode: " + "too many input transactions to fit into " + "max message size [count " + dart.str(count) + ", max " + dart.str(780336) + "]"));
      }
      this.txIn = T.JSArrayOfTxInL().of([]);
      for (let i = 0; i < dart.notNull(count); i = i + 1) {
        this.txIn[$add](new transaction.TxIn.new());
        offset = transaction._readTxIn(buf, this.txIn[$_get](i), offset);
      }
      data = transaction.readVarInt(buf, offset);
      count = data[$_get](0);
      offset = data[$_get](1);
      if (dart.notNull(count) > 3728271) {
        dart.throw(new core.FormatException.new("MsgTx.BtcDecode:" + "too many output transactions to fit into " + "max message size [count " + dart.str(count) + ", max " + dart.str(3728271) + "]"));
      }
      this.txOut = T.JSArrayOfTxOutL().of([]);
      for (let i = 0; i < dart.notNull(count); i = i + 1) {
        this.txOut[$add](new transaction.TxOut.new());
        offset = transaction._readTxOut(buf, this.txOut[$_get](i), offset);
      }
      if (flag !== 0 && enc === 2) {
        for (let i = 0; i < dart.notNull(this.txIn[$length]); i = i + 1) {
          data = transaction.readVarInt(buf, offset);
          let witCount = data[$_get](0);
          offset = data[$_get](1);
          this.txIn[$_get](i).witness = T.JSArrayOfUint8ListL().of([]);
          for (let j = 0; j < dart.notNull(witCount); j = j + 1) {
            let d = transaction._readScript(buf, 11000, offset, "script witness item");
            this.txIn[$_get](i).witness[$add](T.Uint8ListL().as(d[$_get](0)));
            offset = T.intL().as(d[$_get](1));
          }
        }
      }
      this.lockTime = buf[$getUint32](offset, typed_data.Endian.little);
      offset = dart.notNull(offset) + 4;
    }
    encode(buf, offset = 0, enc = 2) {
      let t7;
      buf[$setUint32](offset, this.version, typed_data.Endian.little);
      offset = dart.notNull(offset) + 4;
      let doWitness = enc === 2 && dart.test(this.hasWitness());
      if (doWitness) {
        buf[$setUint16](offset, 1);
        offset = dart.notNull(offset) + 2;
      }
      let count = this.txIn[$length];
      offset = transaction.writeVarInt(buf, count, offset);
      for (let i = 0; i < dart.notNull(this.txIn[$length]); i = i + 1) {
        offset = transaction._writeTxIn(buf, this.txIn[$_get](i), offset);
      }
      count = this.txOut[$length];
      offset = transaction.writeVarInt(buf, count, offset);
      for (let i = 0; i < dart.notNull(this.txOut[$length]); i = i + 1) {
        offset = transaction.writeTxOut(buf, this.txOut[$_get](i), offset);
      }
      if (doWitness) {
        for (let i = 0; i < dart.notNull(this.txIn[$length]); i = i + 1) {
          offset = transaction._writeTxWitness(buf, this.version, this.txIn[$_get](i).witness, offset);
        }
      }
      buf[$setUint32](offset, (t7 = this.lockTime, t7 == null ? 0 : t7), typed_data.Endian.little);
    }
    serializeNoWitness(buf) {
      this.encode(buf, 0, 1);
    }
    serialize(buf) {
      this.encode(buf, 0, 2);
    }
    static fromBytes(buf) {
      let msgTx = new transaction.MsgTx.new();
      msgTx.decode(buf);
      return msgTx;
    }
  };
  (transaction.MsgTx.new = function(opts) {
    let version = opts && 'version' in opts ? opts.version : null;
    let txIn = opts && 'txIn' in opts ? opts.txIn : null;
    let txOut = opts && 'txOut' in opts ? opts.txOut : null;
    let lockTime = opts && 'lockTime' in opts ? opts.lockTime : null;
    this[version$] = version;
    this[txIn$] = txIn;
    this[txOut$] = txOut;
    this[lockTime$] = lockTime;
    ;
  }).prototype = transaction.MsgTx.prototype;
  dart.addTypeTests(transaction.MsgTx);
  dart.addTypeCaches(transaction.MsgTx);
  dart.setMethodSignature(transaction.MsgTx, () => ({
    __proto__: dart.getMethods(transaction.MsgTx.__proto__),
    addTxIn: dart.fnType(dart.void, [dart.legacy(transaction.TxIn)]),
    addTxOut: dart.fnType(dart.void, [dart.legacy(transaction.TxOut)]),
    serializeSizeStripped: dart.fnType(dart.legacy(core.int), []),
    [_baseSize]: dart.fnType(dart.legacy(core.int), []),
    hasWitness: dart.fnType(dart.legacy(core.bool), []),
    serializeSize: dart.fnType(dart.legacy(core.int), []),
    decode: dart.fnType(dart.void, [dart.legacy(typed_data.ByteData)], [dart.legacy(core.int), dart.legacy(core.int)]),
    encode: dart.fnType(dart.void, [dart.legacy(typed_data.ByteData)], [dart.legacy(core.int), dart.legacy(core.int)]),
    serializeNoWitness: dart.fnType(dart.void, [dart.legacy(typed_data.ByteData)]),
    serialize: dart.fnType(dart.void, [dart.legacy(typed_data.ByteData)])
  }));
  dart.setLibraryUri(transaction.MsgTx, I[5]);
  dart.setFieldSignature(transaction.MsgTx, () => ({
    __proto__: dart.getFields(transaction.MsgTx.__proto__),
    version: dart.fieldType(dart.legacy(core.int)),
    txIn: dart.fieldType(dart.legacy(core.List$(dart.legacy(transaction.TxIn)))),
    txOut: dart.fieldType(dart.legacy(core.List$(dart.legacy(transaction.TxOut)))),
    lockTime: dart.fieldType(dart.legacy(core.int))
  }));
  var tx$ = dart.privateName(transaction, "AuthoredTx.tx");
  var prevScripts$ = dart.privateName(transaction, "AuthoredTx.prevScripts");
  var totalInput$ = dart.privateName(transaction, "AuthoredTx.totalInput");
  var inputValues$0 = dart.privateName(transaction, "AuthoredTx.inputValues");
  var changeIndex$ = dart.privateName(transaction, "AuthoredTx.changeIndex");
  var estimatedSignedSerializeSize$ = dart.privateName(transaction, "AuthoredTx.estimatedSignedSerializeSize");
  transaction.AuthoredTx = class AuthoredTx extends core.Object {
    get tx() {
      return this[tx$];
    }
    set tx(value) {
      this[tx$] = value;
    }
    get prevScripts() {
      return this[prevScripts$];
    }
    set prevScripts(value) {
      this[prevScripts$] = value;
    }
    get totalInput() {
      return this[totalInput$];
    }
    set totalInput(value) {
      this[totalInput$] = value;
    }
    get inputValues() {
      return this[inputValues$0];
    }
    set inputValues(value) {
      this[inputValues$0] = value;
    }
    get changeIndex() {
      return this[changeIndex$];
    }
    set changeIndex(value) {
      this[changeIndex$] = value;
    }
    get estimatedSignedSerializeSize() {
      return this[estimatedSignedSerializeSize$];
    }
    set estimatedSignedSerializeSize(value) {
      this[estimatedSignedSerializeSize$] = value;
    }
  };
  (transaction.AuthoredTx.new = function(opts) {
    let tx = opts && 'tx' in opts ? opts.tx : null;
    let prevScripts = opts && 'prevScripts' in opts ? opts.prevScripts : null;
    let totalInput = opts && 'totalInput' in opts ? opts.totalInput : null;
    let changeIndex = opts && 'changeIndex' in opts ? opts.changeIndex : null;
    let inputValues = opts && 'inputValues' in opts ? opts.inputValues : null;
    let estimatedSignedSerializeSize = opts && 'estimatedSignedSerializeSize' in opts ? opts.estimatedSignedSerializeSize : null;
    this[tx$] = tx;
    this[prevScripts$] = prevScripts;
    this[totalInput$] = totalInput;
    this[changeIndex$] = changeIndex;
    this[inputValues$0] = inputValues;
    this[estimatedSignedSerializeSize$] = estimatedSignedSerializeSize;
    ;
  }).prototype = transaction.AuthoredTx.prototype;
  dart.addTypeTests(transaction.AuthoredTx);
  dart.addTypeCaches(transaction.AuthoredTx);
  dart.setLibraryUri(transaction.AuthoredTx, I[5]);
  dart.setFieldSignature(transaction.AuthoredTx, () => ({
    __proto__: dart.getFields(transaction.AuthoredTx.__proto__),
    tx: dart.fieldType(dart.legacy(transaction.MsgTx)),
    prevScripts: dart.fieldType(dart.legacy(core.List$(dart.legacy(typed_data.Uint8List)))),
    totalInput: dart.fieldType(dart.legacy(utils$.Amount)),
    inputValues: dart.fieldType(dart.legacy(core.List$(dart.legacy(utils$.Amount)))),
    changeIndex: dart.fieldType(dart.legacy(core.int)),
    estimatedSignedSerializeSize: dart.fieldType(dart.legacy(core.int))
  }));
  transaction.unsignedTransaction = function unsignedTransaction(outputs, relayFeePerKb, fetchInputs, fetchChange) {
    let targetAmount = helpers.sumOutputValues(outputs);
    let estimatedSize = txsizes.estimateVirtualSize(0, 1, 0, outputs, true);
    let targetFee = txrules.feeForSerializeSize(relayFeePerKb, estimatedSize);
    while (true) {
      let inputDetail = T.InputDetailL().as(dart.dcall(fetchInputs, [targetAmount['+'](targetFee)]));
      if (inputDetail.amount.compareTo(targetAmount['+'](targetFee)) === -1) {
        dart.throw(new core.FormatException.new("insufficient balance"));
      }
      let nested = 0;
      let p2wpkh = 0;
      let p2pkh = 0;
      for (let i = 0; i < dart.notNull(inputDetail.scripts[$length]); i = i + 1) {
        let pkScript = inputDetail.scripts[$_get](i);
        if (dart.test(txscript.isPayToScriptHash(pkScript))) {
          nested = nested + 1;
        } else if (dart.test(txscript.isPayToWitnessPubKeyHash(pkScript))) {
          p2wpkh = p2wpkh + 1;
        } else {
          p2pkh = p2pkh + 1;
        }
      }
      let maxSignedSize = txsizes.estimateVirtualSize(p2pkh, p2wpkh, nested, outputs, true);
      let maxRequiredFee = txrules.feeForSerializeSize(relayFeePerKb, maxSignedSize);
      let remainingAmount = inputDetail.amount['-'](targetAmount);
      if (remainingAmount.compareTo(maxRequiredFee) === -1) {
        targetFee = maxRequiredFee;
        continue;
      }
      let unsignedTransaction = new transaction.MsgTx.new({version: 2, txIn: inputDetail.inputs, txOut: outputs, lockTime: 0});
      let changeAmount = inputDetail.amount['-'](targetAmount)['-'](maxRequiredFee);
      if (!dart.equals(changeAmount, new utils$.Amount.new(core.BigInt.zero)) && !dart.test(txrules.isDustAmount(changeAmount, new utils$.Amount.new(core._BigIntImpl.from(1000))))) {
        fetchChange.script();
        let changeScript = fetchChange.hash;
        let change = new transaction.TxOut.new({value: changeAmount, pkScript: changeScript});
        outputs[$add](change);
      }
      return new transaction.AuthoredTx.new({tx: unsignedTransaction, inputValues: inputDetail.inputValues, prevScripts: inputDetail.scripts, totalInput: inputDetail.amount});
    }
  };
  transaction._spendWitnessKeyHash = function _spendWitnessKeyHash(txIn, pkScript, inputValue, net, kdb, sdb, tx, hashCache, idx) {
    let data = txscript.extractPkScriptAddrs(pkScript, net);
    let addrs = T.ListLOfAddressL().as(data[$_get](1));
    let resp = kdb.getKey(addrs[$_get](0));
    let pubKeyHash = sdb.getScript(addrs[$_get](0));
    let p2wkhAddr = new utils$.AddressWitnessPubKeyHash.new({hash: pubKeyHash, net: net});
    let witnessProgram = txscript.payToAddrScript(p2wkhAddr);
    let witnessScript = txscript.witnessSignature(tx, hashCache, idx, inputValue, witnessProgram, 1, resp.key, true);
    txIn.witness = witnessScript;
  };
  transaction._spendNestedWitnessPubKeyHash = function _spendNestedWitnessPubKeyHash(txIn, pkScript, inputValue, net, kdb, sdb, tx, hashCache, idx) {
    let data = txscript.extractPkScriptAddrs(pkScript, net);
    let addrs = T.ListLOfAddressL().as(data[$_get](1));
    let resp = kdb.getKey(addrs[$_get](0));
    let pubKeyHash = sdb.getScript(addrs[$_get](0));
    let p2wkhAddr = new utils$.AddressWitnessPubKeyHash.new({hash: pubKeyHash, net: net});
    let witnessProgram = txscript.payToAddrScript(p2wkhAddr);
    let sigScript = new txscript.ScriptBuilder.new().addData(witnessProgram).script();
    txIn.signatureScript = sigScript;
    let witnessScript = txscript.witnessSignature(tx, hashCache, idx, inputValue, witnessProgram, 1, resp.key, resp.compressed);
    txIn.witness = witnessScript;
  };
  transaction.addAllInputScripts = function addAllInputScripts(tx, prevPkScripts, inputValues, net, kdb, sdb) {
    let inputs = tx.txIn;
    let hashCache = new txscript.TxSigHashes.new(tx);
    if (inputs[$length] != prevPkScripts[$length]) {
      dart.throw(new core.FormatException.new("tx.TxIn and prevPkScripts slices must " + "have equal length"));
    }
    for (let i = 0; i < dart.notNull(inputs[$length]); i = i + 1) {
      let pkScript = prevPkScripts[$_get](i);
      if (dart.test(txscript.isPayToScriptHash(pkScript))) {
        transaction._spendNestedWitnessPubKeyHash(inputs[$_get](i), pkScript, inputValues[$_get](i), net, kdb, sdb, tx, hashCache, i);
      } else if (dart.test(txscript.isPayToWitnessPubKeyHash(pkScript))) {
        transaction._spendWitnessKeyHash(inputs[$_get](i), pkScript, inputValues[$_get](i), net, kdb, sdb, tx, hashCache, i);
      } else {
        let sigScript = inputs[$_get](i).signatureScript;
        let script = txscript.signTxOutput(net, tx, i, pkScript, 1, kdb, sdb, sigScript);
        inputs[$_get](i).signatureScript = script;
      }
    }
  };
  transaction.readVarInt = function readVarInt(buf, offset = 0) {
    let discriminant = buf[$getUint8](offset);
    offset = dart.notNull(offset) + 1;
    let rv = null;
    let min = 0;
    switch (discriminant) {
      case 255:
      {
        rv = buf[$getUint64](offset, typed_data.Endian.little);
        offset = dart.notNull(offset) + 8;
        min = 4294967296;
        break;
      }
      case 254:
      {
        rv = buf[$getUint32](offset, typed_data.Endian.little);
        offset = dart.notNull(offset) + 4;
        min = 65536;
        break;
      }
      case 253:
      {
        rv = buf[$getUint16](offset, typed_data.Endian.little);
        offset = dart.notNull(offset) + 2;
        min = 253;
        break;
      }
      default:
      {
        rv = discriminant;
        break;
      }
    }
    if (dart.notNull(rv) < min) {
      dart.throw(new core.FormatException.new("non-canonical varint " + dart.str(rv) + " - discriminant " + dart.str(discriminant) + " must encode a value greater than " + dart.str(min)));
    }
    return T.JSArrayOfintL().of([rv, offset]);
  };
  transaction.writeVarInt = function writeVarInt(buf, val, offset = 0) {
    if (dart.notNull(val) < 253) {
      buf[$setUint8](offset, val);
      return dart.notNull(offset) + 1;
    }
    if (dart.notNull(val) <= 32768) {
      buf[$setUint8](offset, 253);
      offset = dart.notNull(offset) + 1;
      buf[$setUint16](offset, val, typed_data.Endian.little);
      return dart.notNull(offset) + 2;
    }
    if (dart.notNull(val) <= 2147483648.0) {
      buf[$setUint8](offset, 254);
      offset = dart.notNull(offset) + 1;
      buf[$setUint32](offset, val, typed_data.Endian.little);
      return dart.notNull(offset) + 4;
    }
    buf[$setUint8](offset, 255);
    offset = dart.notNull(offset) + 1;
    buf[$setUint64](offset, val, typed_data.Endian.little);
    return dart.notNull(offset) + 8;
  };
  transaction.varIntSerializeSize = function varIntSerializeSize(val) {
    if (dart.notNull(val) < 253) {
      return 1;
    }
    if (dart.notNull(val) <= 32768) {
      return 3;
    }
    if (dart.notNull(val) <= 2147483648.0) {
      return 5;
    }
    return 9;
  };
  transaction.writeVarString = function writeVarString(buf, str, offset = 0) {
    offset = transaction.writeVarInt(buf, str.length, offset);
    let bytes = _native_typed_data.NativeUint8List.fromList(str[$codeUnits]);
    offset = transaction.copyBytes(buf, bytes, offset);
    return offset;
  };
  transaction.copyBytes = function copyBytes(buf, bytes, offset = 0) {
    for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
      buf[$setUint8](T.intL().as(offset), bytes[$_get](i));
      offset = dart.dsend(offset, '+', [1]);
    }
    return T.intL().as(offset);
  };
  transaction.writeVarBytes = function writeVarBytes(buf, bytes, offset = 0) {
    offset = transaction.writeVarInt(buf, bytes[$length], T.intL().as(offset));
    return transaction.copyBytes(buf, bytes, offset);
  };
  transaction.writeUInt64LE = function writeUInt64LE(buf, val, offset = 0) {
    buf[$setUint64](T.intL().as(offset), val, typed_data.Endian.little);
    return T.intL().as(offset = dart.dsend(offset, '+', [8]));
  };
  transaction.writeUInt64BE = function writeUInt64BE(buf, val, offset = 0) {
    buf[$setUint64](T.intL().as(offset), val);
    return T.intL().as(offset = dart.dsend(offset, '+', [8]));
  };
  transaction._readScript = function _readScript(buf, maxAllowed, offset, fieldName) {
    let data = transaction.readVarInt(buf, offset);
    let count = data[$_get](0);
    offset = data[$_get](1);
    if (dart.notNull(count) > dart.notNull(maxAllowed)) {
      dart.throw(new core.FormatException.new(dart.str(fieldName) + " is larger than the max allowed size [count " + dart.str(count) + ", max " + dart.str(maxAllowed) + "]"));
    }
    return [buf[$buffer][$asUint8List]()[$sublist](offset, dart.notNull(offset) + dart.notNull(count)), dart.notNull(offset) + dart.notNull(count)];
  };
  transaction._readOutPoint = function _readOutPoint(buf, ti, offset) {
    let hash = buf[$buffer][$asUint8List]()[$sublist](offset, dart.notNull(offset) + 32);
    offset = dart.notNull(offset) + 32;
    let index = buf[$getUint32](offset, typed_data.Endian.little);
    offset = dart.notNull(offset) + 4;
    ti.previousOutPoint = new transaction.OutPoint.new({hash: new chainhash.Hash.new(hash), index: index});
    return offset;
  };
  transaction._writeOutPoint = function _writeOutPoint(buf, op, offset) {
    let hash = op.hash.cloneBytes();
    offset = transaction.copyBytes(buf, hash, offset);
    buf[$setUint32](offset, op.index, typed_data.Endian.little);
    offset = dart.notNull(offset) + 4;
    return offset;
  };
  transaction._readTxIn = function _readTxIn(buf, ti, offset) {
    offset = transaction._readOutPoint(buf, ti, offset);
    let data = transaction._readScript(buf, 33554432, offset, "transaction input signature script");
    ti.signatureScript = T.Uint8ListL().as(data[$_get](0));
    offset = T.intL().as(data[$_get](1));
    ti.sequence = buf[$getUint32](offset, typed_data.Endian.little);
    offset = dart.notNull(offset) + 4;
    return offset;
  };
  transaction._writeTxIn = function _writeTxIn(buf, ti, offset) {
    offset = transaction._writeOutPoint(buf, ti.previousOutPoint, offset);
    offset = transaction.writeVarBytes(buf, ti.signatureScript, offset);
    buf[$setUint32](offset, ti.sequence, typed_data.Endian.little);
    offset = dart.notNull(offset) + 4;
    return offset;
  };
  transaction._readTxOut = function _readTxOut(buf, to, offset) {
    to.value = new utils$.Amount.new(core._BigIntImpl.from(buf[$getUint32](offset, typed_data.Endian.little)));
    offset = dart.notNull(offset) + 8;
    let data = transaction._readScript(buf, 33554432, offset, "transaction input signature script");
    to.pkScript = T.Uint8ListL().as(data[$_get](0));
    offset = T.intL().as(data[$_get](1));
    return offset;
  };
  transaction.writeTxOut = function writeTxOut(buf, to, offset) {
    buf[$setUint64](offset, to.value.toCoin().toInt(), typed_data.Endian.little);
    offset = dart.notNull(offset) + 8;
    return transaction.writeVarBytes(buf, to.pkScript, offset);
  };
  transaction._writeTxWitness = function _writeTxWitness(buf, version, wit, offset) {
    offset = transaction.writeVarInt(buf, wit[$length], offset);
    for (let i = 0; i < dart.notNull(wit[$length]); i = i + 1) {
      offset = transaction.writeVarBytes(buf, wit[$_get](i), offset);
    }
    return offset;
  };
  dart.defineLazy(transaction, {
    /*transaction.MAX_UINT_16*/get MAX_UINT_16() {
      return 32768;
    },
    /*transaction.MAX_UINT_32*/get MAX_UINT_32() {
      return 2147483648.0;
    },
    /*transaction.MAX_MESSAGE_PAYLOAD*/get MAX_MESSAGE_PAYLOAD() {
      return 33554432;
    },
    /*transaction.MAX_TX_IN_SEQUENCE_NUM*/get MAX_TX_IN_SEQUENCE_NUM() {
      return 4294967295.0;
    },
    /*transaction.MIN_TX_IN_PAYLOAD*/get MIN_TX_IN_PAYLOAD() {
      return 43;
    },
    /*transaction.MAX_TX_IN_PER_MESSAGE*/get MAX_TX_IN_PER_MESSAGE() {
      return 780336;
    },
    /*transaction.MIN_TX_OUT_PAYLOAD*/get MIN_TX_OUT_PAYLOAD() {
      return 9;
    },
    /*transaction.MAX_TX_OUT_PER_MESSAGE*/get MAX_TX_OUT_PER_MESSAGE() {
      return 3728271;
    },
    /*transaction.MAX_WITNESS_ITEM_SIZE*/get MAX_WITNESS_ITEM_SIZE() {
      return 11000;
    },
    /*transaction.BASE_ENCODING*/get BASE_ENCODING() {
      return 1;
    },
    /*transaction.WITNESS_ENCODING*/get WITNESS_ENCODING() {
      return 2;
    },
    /*transaction.GENERATED_TX_VERSION*/get GENERATED_TX_VERSION() {
      return 2;
    }
  }, true);
  var _hash$ = dart.privateName(chainhash, "_hash");
  chainhash.Hash = class Hash extends core.Object {
    cloneBytes() {
      return _native_typed_data.NativeUint8List.fromList(this[_hash$]);
    }
    get length() {
      return this[_hash$][$length];
    }
    toString() {
      let reversedHash = _native_typed_data.NativeByteData.new(this[_hash$][$lengthInBytes]);
      for (let i = 0; i < 32 / 2; i = i + 1) {
        reversedHash[$setUint8](i, this[_hash$][$_get](32 - 1 - i));
        reversedHash[$setUint8](32 - 1 - i, this[_hash$][$_get](i));
      }
      return utils$.bytesToHex(reversedHash[$buffer][$asUint8List]());
    }
  };
  (chainhash.Hash.new = function(_hash) {
    this[_hash$] = _hash;
    ;
  }).prototype = chainhash.Hash.prototype;
  (chainhash.Hash.fromString = function(src) {
    let t7, t7$;
    this[_hash$] = null;
    if (dart.test((t7$ = (t7 = src, t7 == null ? null : t7[$isEmpty]), t7$ == null ? true : t7$)) || src.length > 64) {
      dart.throw(new core.FormatException.new("max hash string length is " + dart.str(64) + " bytes"));
    }
    let len = src.length;
    let srcBytes = _native_typed_data.NativeByteData.new((len / 2)[$truncate]());
    transaction.copyBytes(srcBytes, utils$.hexToBytes(src), 0);
    if (len[$modulo](2) !== 0) {
      let bytes = _native_typed_data.NativeByteData.new(len + 1);
      bytes[$setUint8](0, 0);
      transaction.copyBytes(bytes, srcBytes[$buffer][$asUint8List](), 1);
      srcBytes = bytes;
    }
    let reversedHash = _native_typed_data.NativeByteData.new(srcBytes[$lengthInBytes]);
    for (let i = 0; i < 32 / 2; i = i + 1) {
      reversedHash[$setUint8](i, srcBytes[$getUint8](32 - 1 - i));
      reversedHash[$setUint8](32 - 1 - i, srcBytes[$getUint8](i));
    }
    this[_hash$] = reversedHash[$buffer][$asUint8List]();
  }).prototype = chainhash.Hash.prototype;
  dart.addTypeTests(chainhash.Hash);
  dart.addTypeCaches(chainhash.Hash);
  dart.setMethodSignature(chainhash.Hash, () => ({
    __proto__: dart.getMethods(chainhash.Hash.__proto__),
    cloneBytes: dart.fnType(dart.legacy(typed_data.Uint8List), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(chainhash.Hash, () => ({
    __proto__: dart.getGetters(chainhash.Hash.__proto__),
    length: dart.legacy(core.int)
  }));
  dart.setLibraryUri(chainhash.Hash, I[6]);
  dart.setFieldSignature(chainhash.Hash, () => ({
    __proto__: dart.getFields(chainhash.Hash.__proto__),
    [_hash$]: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  dart.defineExtensionMethods(chainhash.Hash, ['toString']);
  chainhash.hashB = function hashB(data) {
    let digest = new sha256.SHA256Digest.new();
    digest.update(data, 0, data[$length]);
    let out = _native_typed_data.NativeUint8List.new(digest.digestSize);
    digest.doFinal(out, 0);
    return out;
  };
  chainhash.hashH = function hashH(data) {
    return new chainhash.Hash.new(chainhash.hashB(data));
  };
  dart.defineLazy(chainhash, {
    /*chainhash.HASH_SIZE*/get HASH_SIZE() {
      return 32;
    },
    /*chainhash.MAX_HASH_STRING_SIZE*/get MAX_HASH_STRING_SIZE() {
      return 64;
    }
  }, true);
  var _encoder = dart.privateName(base58check, "_encoder");
  var _decoder = dart.privateName(base58check, "_decoder");
  base58check.Base58CheckCodec = class Base58CheckCodec extends convert.Codec$(dart.legacy(typed_data.Uint8List), dart.legacy(core.String)) {
    static new() {
      base58check.Base58CheckCodec._instance == null ? base58check.Base58CheckCodec._instance = new base58check.Base58CheckCodec.__() : null;
      return base58check.Base58CheckCodec._instance;
    }
    get encoder() {
      return this[_encoder];
    }
    get decoder() {
      return this[_decoder];
    }
  };
  (base58check.Base58CheckCodec.__ = function() {
    this[_encoder] = new base58check.Base58CheckEncoder.new();
    this[_decoder] = new base58check.Base58CheckDecoder.new();
    base58check.Base58CheckCodec.__proto__.new.call(this);
    ;
  }).prototype = base58check.Base58CheckCodec.prototype;
  dart.addTypeTests(base58check.Base58CheckCodec);
  dart.addTypeCaches(base58check.Base58CheckCodec);
  dart.setGetterSignature(base58check.Base58CheckCodec, () => ({
    __proto__: dart.getGetters(base58check.Base58CheckCodec.__proto__),
    encoder: dart.legacy(convert.Converter$(dart.legacy(typed_data.Uint8List), dart.legacy(core.String))),
    decoder: dart.legacy(convert.Converter$(dart.legacy(core.String), dart.legacy(typed_data.Uint8List)))
  }));
  dart.setLibraryUri(base58check.Base58CheckCodec, I[7]);
  dart.setFieldSignature(base58check.Base58CheckCodec, () => ({
    __proto__: dart.getFields(base58check.Base58CheckCodec.__proto__),
    [_encoder]: dart.finalFieldType(dart.legacy(base58check.Base58CheckEncoder)),
    [_decoder]: dart.finalFieldType(dart.legacy(base58check.Base58CheckDecoder))
  }));
  dart.defineLazy(base58check.Base58CheckCodec, {
    /*base58check.Base58CheckCodec._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, true);
  base58check.Base58CheckEncoder = class Base58CheckEncoder extends convert.Converter$(dart.legacy(typed_data.Uint8List), dart.legacy(core.String)) {
    convert(payload) {
      T.Uint8ListL().as(payload);
      let bytes = _native_typed_data.NativeUint8List.new(dart.notNull(payload[$length]) + 4);
      bytes[$setRange](0, payload[$length], payload);
      let checksum = base58check._hash(bytes[$sublist](0, dart.notNull(bytes[$length]) - 4));
      bytes[$setRange](dart.notNull(bytes[$length]) - 4, bytes[$length], checksum[$getRange](0, 4));
      return bs58.base58.encode(bytes);
    }
  };
  (base58check.Base58CheckEncoder.new = function() {
    base58check.Base58CheckEncoder.__proto__.new.call(this);
    ;
  }).prototype = base58check.Base58CheckEncoder.prototype;
  dart.addTypeTests(base58check.Base58CheckEncoder);
  dart.addTypeCaches(base58check.Base58CheckEncoder);
  dart.setMethodSignature(base58check.Base58CheckEncoder, () => ({
    __proto__: dart.getMethods(base58check.Base58CheckEncoder.__proto__),
    convert: dart.fnType(dart.legacy(core.String), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(base58check.Base58CheckEncoder, I[7]);
  var _convert = dart.privateName(base58check, "_convert");
  base58check.Base58CheckDecoder = class Base58CheckDecoder extends convert.Converter$(dart.legacy(core.String), dart.legacy(typed_data.Uint8List)) {
    convert(encoded) {
      T.StringL().as(encoded);
      return this[_convert](encoded, true);
    }
    convertUnchecked(encoded) {
      return this[_convert](encoded, true);
    }
    equals(list1, list2) {
      if (list1 == list2) {
        return true;
      }
      if (list1 == null || list2 == null) {
        return false;
      }
      let length = list1[$length];
      if (length != list2[$length]) {
        return false;
      }
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        if (list1[$_get](i) != list2[$_get](i)) {
          return false;
        }
      }
      return true;
    }
    [_convert](encoded, validateChecksum) {
      let bytes = bs58.base58.decode(encoded);
      if (dart.notNull(bytes[$length]) < 6) {
        dart.throw(new core.FormatException.new("Invalid Base58Check encoded string: must be at least size 6"));
      }
      let checksum = base58check._hash(bytes[$sublist](0, dart.notNull(bytes[$length]) - 4));
      let providedChecksum = bytes[$sublist](dart.notNull(bytes[$length]) - 4, bytes[$length]);
      if (dart.test(validateChecksum) && !dart.test(this.equals(providedChecksum, checksum[$sublist](0, 4)))) {
        dart.throw(new core.FormatException.new("Invalid checksum in Base58Check encoding."));
      }
      return _native_typed_data.NativeUint8List.fromList(bytes[$sublist](0, dart.notNull(bytes[$length]) - 4));
    }
  };
  (base58check.Base58CheckDecoder.new = function() {
    base58check.Base58CheckDecoder.__proto__.new.call(this);
    ;
  }).prototype = base58check.Base58CheckDecoder.prototype;
  dart.addTypeTests(base58check.Base58CheckDecoder);
  dart.addTypeCaches(base58check.Base58CheckDecoder);
  dart.setMethodSignature(base58check.Base58CheckDecoder, () => ({
    __proto__: dart.getMethods(base58check.Base58CheckDecoder.__proto__),
    convert: dart.fnType(dart.legacy(typed_data.Uint8List), [dart.legacy(core.Object)]),
    convertUnchecked: dart.fnType(dart.legacy(typed_data.Uint8List), [dart.legacy(core.String)]),
    equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(typed_data.Uint8List), dart.legacy(typed_data.Uint8List)]),
    [_convert]: dart.fnType(dart.legacy(typed_data.Uint8List), [dart.legacy(core.String), dart.legacy(core.bool)])
  }));
  dart.setLibraryUri(base58check.Base58CheckDecoder, I[7]);
  base58check._hash = function _hash$0(b) {
    return chainhash.hashB(chainhash.hashB(b));
  };
  var _value = dart.privateName(utils$, "_value");
  utils$.Amount = class Amount extends core.Object {
    toUnit(u = -8) {
      return this[_value]['/'](core._BigIntImpl.from(10).pow(dart.notNull(u) + 8));
    }
    format(u) {
      let units = " ";
      switch (u) {
        case 6:
        {
          units = units + "MBTC";
          break;
        }
        case 3:
        {
          units = units + "kBTC";
          break;
        }
        case 0:
        {
          units = units + "BTC";
          break;
        }
        case -3:
        {
          units = units + "mBTC";
          break;
        }
        case -6:
        {
          units = units + "μBTC";
          break;
        }
        case -8:
        {
          units = units + "Atom";
          break;
        }
        default:
        {
          return "1e" + dart.str(u) + " BTC";
        }
      }
      return dart.toString(this.toUnit(u)) + units;
    }
    toCoin() {
      return this[_value];
    }
    toString() {
      return this.format(0);
    }
    compareTo(other) {
      if (dart.test(this[_value]['<'](other[_value]))) {
        return -1;
      } else if (dart.test(this[_value]['>'](other[_value]))) {
        return 1;
      }
      return 0;
    }
    bytes() {
      let ret = utils$.intToBytes(this[_value])[$toList]({growable: true});
      let len = ret[$length];
      for (let i = 0; i < 8 - dart.notNull(len); i = i + 1) {
        ret[$insert](0, 0);
      }
      ret = T.ListOfintL().from(ret[$reversed]);
      return _native_typed_data.NativeUint8List.fromList(ret);
    }
    ['+'](other) {
      return new utils$.Amount.new(this[_value]['+'](other[_value]));
    }
    ['-'](other) {
      return new utils$.Amount.new(this[_value]['-'](other[_value]));
    }
  };
  (utils$.Amount.new = function(amount) {
    this[_value] = null;
    this[_value] = amount;
  }).prototype = utils$.Amount.prototype;
  dart.addTypeTests(utils$.Amount);
  dart.addTypeCaches(utils$.Amount);
  dart.setMethodSignature(utils$.Amount, () => ({
    __proto__: dart.getMethods(utils$.Amount.__proto__),
    toUnit: dart.fnType(dart.legacy(core.double), [], [dart.legacy(core.int)]),
    format: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    toCoin: dart.fnType(dart.legacy(core.BigInt), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    compareTo: dart.fnType(dart.legacy(core.int), [dart.legacy(utils$.Amount)]),
    bytes: dart.fnType(dart.legacy(typed_data.Uint8List), []),
    '+': dart.fnType(dart.legacy(utils$.Amount), [dart.legacy(utils$.Amount)]),
    '-': dart.fnType(dart.legacy(utils$.Amount), [dart.legacy(utils$.Amount)])
  }));
  dart.setLibraryUri(utils$.Amount, I[8]);
  dart.setFieldSignature(utils$.Amount, () => ({
    __proto__: dart.getFields(utils$.Amount.__proto__),
    [_value]: dart.fieldType(dart.legacy(core.BigInt))
  }));
  dart.defineExtensionMethods(utils$.Amount, ['toString']);
  var _hash$1 = dart.privateName(utils$, "_hash");
  var _net$ = dart.privateName(utils$, "_net");
  utils$.Address = class Address extends core.Object {
    toString() {
      return this.encode();
    }
    encode() {
      return this.toString();
    }
    scriptAddress() {
      return this.hash160();
    }
    hash160() {
      return this[_hash$1];
    }
    isForNet(net) {
      return dart.equals(this[_net$], net);
    }
    net() {
      return this[_net$];
    }
  };
  (utils$.Address.new = function(opts) {
    let hash = opts && 'hash' in opts ? opts.hash : null;
    let net = opts && 'net' in opts ? opts.net : null;
    this[_hash$1] = null;
    this[_net$] = null;
    this[_hash$1] = hash;
    this[_net$] = net;
  }).prototype = utils$.Address.prototype;
  dart.addTypeTests(utils$.Address);
  dart.addTypeCaches(utils$.Address);
  dart.setMethodSignature(utils$.Address, () => ({
    __proto__: dart.getMethods(utils$.Address.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    encode: dart.fnType(dart.legacy(core.String), []),
    scriptAddress: dart.fnType(dart.legacy(typed_data.Uint8List), []),
    hash160: dart.fnType(dart.legacy(typed_data.Uint8List), []),
    isForNet: dart.fnType(dart.legacy(core.bool), [dart.legacy(chaincfg.Params)]),
    net: dart.fnType(dart.legacy(chaincfg.Params), [])
  }));
  dart.setLibraryUri(utils$.Address, I[8]);
  dart.setFieldSignature(utils$.Address, () => ({
    __proto__: dart.getFields(utils$.Address.__proto__),
    [_hash$1]: dart.fieldType(dart.legacy(typed_data.Uint8List)),
    [_net$]: dart.fieldType(dart.legacy(chaincfg.Params))
  }));
  dart.defineExtensionMethods(utils$.Address, ['toString']);
  var _netID = dart.privateName(utils$, "_netID");
  utils$.AddressScriptHash = class AddressScriptHash extends utils$.Address {
    encode() {
      return utils$.encodeAddress(this[_hash$1], this[_netID]);
    }
  };
  (utils$.AddressScriptHash.new = function(opts) {
    let scriptHash = opts && 'scriptHash' in opts ? opts.scriptHash : null;
    let net = opts && 'net' in opts ? opts.net : null;
    this[_netID] = null;
    utils$.AddressScriptHash.__proto__.new.call(this, {hash: scriptHash, net: net});
    this[_netID] = net.scriptHashAddrID;
  }).prototype = utils$.AddressScriptHash.prototype;
  dart.addTypeTests(utils$.AddressScriptHash);
  dart.addTypeCaches(utils$.AddressScriptHash);
  dart.setLibraryUri(utils$.AddressScriptHash, I[8]);
  dart.setFieldSignature(utils$.AddressScriptHash, () => ({
    __proto__: dart.getFields(utils$.AddressScriptHash.__proto__),
    [_netID]: dart.fieldType(dart.legacy(core.int))
  }));
  var witnessVersion = dart.privateName(utils$, "AddressWitnessPubKeyHash.witnessVersion");
  var hrp = dart.privateName(utils$, "AddressWitnessPubKeyHash.hrp");
  utils$.AddressWitnessPubKeyHash = class AddressWitnessPubKeyHash extends utils$.Address {
    get witnessVersion() {
      return this[witnessVersion];
    }
    set witnessVersion(value) {
      this[witnessVersion] = value;
    }
    get hrp() {
      return this[hrp];
    }
    set hrp(value) {
      this[hrp] = value;
    }
  };
  (utils$.AddressWitnessPubKeyHash.new = function(opts) {
    let hash = opts && 'hash' in opts ? opts.hash : null;
    let net = opts && 'net' in opts ? opts.net : null;
    this[witnessVersion] = null;
    this[hrp] = null;
    utils$.AddressWitnessPubKeyHash.__proto__.new.call(this, {hash: hash, net: net});
    this.hrp = net.bech32HRPSegwit[$toLowerCase]();
    this.witnessVersion = 0;
  }).prototype = utils$.AddressWitnessPubKeyHash.prototype;
  dart.addTypeTests(utils$.AddressWitnessPubKeyHash);
  dart.addTypeCaches(utils$.AddressWitnessPubKeyHash);
  dart.setLibraryUri(utils$.AddressWitnessPubKeyHash, I[8]);
  dart.setFieldSignature(utils$.AddressWitnessPubKeyHash, () => ({
    __proto__: dart.getFields(utils$.AddressWitnessPubKeyHash.__proto__),
    witnessVersion: dart.fieldType(dart.legacy(core.int)),
    hrp: dart.fieldType(dart.legacy(core.String))
  }));
  utils$.AddressPubKeyHash = class AddressPubKeyHash extends utils$.Address {
    encode() {
      return utils$.encodeAddress(this[_hash$1], this[_netID]);
    }
  };
  (utils$.AddressPubKeyHash.new = function(opts) {
    let hash = opts && 'hash' in opts ? opts.hash : null;
    let net = opts && 'net' in opts ? opts.net : null;
    this[_netID] = null;
    utils$.AddressPubKeyHash.__proto__.new.call(this, {hash: hash, net: net});
    this[_netID] = net.pubKeyHashAddrID;
  }).prototype = utils$.AddressPubKeyHash.prototype;
  dart.addTypeTests(utils$.AddressPubKeyHash);
  dart.addTypeCaches(utils$.AddressPubKeyHash);
  dart.setLibraryUri(utils$.AddressPubKeyHash, I[8]);
  dart.setFieldSignature(utils$.AddressPubKeyHash, () => ({
    __proto__: dart.getFields(utils$.AddressPubKeyHash.__proto__),
    [_netID]: dart.fieldType(dart.legacy(core.int))
  }));
  utils$.encodeAddress = function encodeAddress(hash, netID) {
    let payload = _native_typed_data.NativeUint8List.new(dart.notNull(hash[$length]) + 1);
    payload[$_set](0, netID);
    payload[$setRange](1, payload[$length], hash);
    return base58check.Base58CheckCodec.new().encode(payload);
  };
  utils$.decodeAddress = function decodeAddress(address) {
    let payload = base58check.Base58CheckCodec.new().decode(address);
    let netID = payload[$_get](0);
    let decoded = payload[$sublist](1);
    let net = utils$._detectNetworkForAddress(netID);
    if (netID == net.scriptHashAddrID) {
      return new utils$.AddressScriptHash.new({scriptHash: decoded, net: net});
    } else if (netID == net.pubKeyHashAddrID) {
      return new utils$.AddressPubKeyHash.new({hash: decoded, net: net});
    }
    dart.throw(new core.FormatException.new("unknown address type"));
  };
  utils$._detectNetworkForAddress = function _detectNetworkForAddress(netID) {
    if (netID == chaincfg.mainnet.scriptHashAddrID || netID == chaincfg.mainnet.pubKeyHashAddrID) {
      return chaincfg.mainnet;
    } else if (netID == chaincfg.testnet3.scriptHashAddrID || netID == chaincfg.testnet3.pubKeyHashAddrID) {
      return chaincfg.testnet3;
    }
    return null;
  };
  utils$._encode = function _encode(bytes) {
    let str = "";
    for (let i = 0; i < dart.notNull(bytes[$length]); i = i + 1) {
      let s = bytes[$_get](i)[$toRadixString](16);
      str = str + s[$padLeft](2, "0");
    }
    return str;
  };
  utils$._decode = function _decode(hex) {
    let len = (hex.length / 2)[$truncate]();
    let bytes = _native_typed_data.NativeUint8List.new(len);
    for (let i = 0; i < len; i = i + 1) {
      bytes[$_set](i, core.int.parse(hex[$substring](i * 2, i * 2 + 2), {radix: 16}));
    }
    return bytes;
  };
  utils$.strip0x = function strip0x(hex) {
    if (hex[$startsWith]("0x")) {
      return hex[$substring](2);
    }
    return hex;
  };
  utils$.toHex = function toHex(number, opts) {
    let pad = opts && 'pad' in opts ? opts.pad : false;
    let include0x = opts && 'include0x' in opts ? opts.include0x : false;
    let forcePadLen = opts && 'forcePadLen' in opts ? opts.forcePadLen : null;
    function toHexSimple() {
      if (T.intL().is(number)) {
        return number[$toRadixString](16);
      } else if (T.BigIntL().is(number)) {
        return number.toRadixString(16);
      } else {
        dart.throw(new core.TypeError.new());
      }
    }
    dart.fn(toHexSimple, T.VoidToStringL());
    let hexString = toHexSimple();
    if (dart.test(pad) && !hexString.length[$isEven]) {
      hexString = "0" + dart.str(hexString);
    }
    if (forcePadLen != null) {
      hexString = hexString[$padLeft](forcePadLen, "0");
    }
    if (dart.test(include0x)) {
      hexString = "0x" + dart.str(hexString);
    }
    return hexString;
  };
  utils$.bytesToHex = function bytesToHex(bytes, opts) {
    let include0x = opts && 'include0x' in opts ? opts.include0x : false;
    return (dart.test(include0x) ? "0x" : "") + dart.notNull(utils$._encode(bytes));
  };
  utils$.numberToBytes = function numberToBytes(number) {
    if (T.BigIntL().is(number)) {
      return utils.encodeBigInt(number);
    }
    let hexString = utils$.toHex(number, {pad: true});
    return utils$._decode(hexString);
  };
  utils$.hexToBytes = function hexToBytes(hexStr) {
    return utils$._decode(utils$.strip0x(hexStr));
  };
  utils$.bytesToInt = function bytesToInt(bytes) {
    return utils.decodeBigInt(bytes);
  };
  utils$.intToBytes = function intToBytes(number) {
    return utils.encodeBigInt(number);
  };
  utils$.hexToInt = function hexToInt(hex) {
    return core.BigInt.parse(utils$.strip0x(hex), {radix: 16});
  };
  dart.defineLazy(utils$, {
    /*utils$.ATOMS_PER_CENT*/get ATOMS_PER_CENT() {
      return 1000000;
    },
    /*utils$.ATOMS_PER_COIN*/get ATOMS_PER_COIN() {
      return 100000000;
    },
    /*utils$.MAX_AMOUNT*/get MAX_AMOUNT() {
      return 210000000;
    },
    /*utils$.AMOUNT_MEGA_COIN*/get AMOUNT_MEGA_COIN() {
      return 6;
    },
    /*utils$.AMOUNT_KILO_COIN*/get AMOUNT_KILO_COIN() {
      return 3;
    },
    /*utils$.AMOUNT_COIN*/get AMOUNT_COIN() {
      return 0;
    },
    /*utils$.AMOUNT_MILLI_COIN*/get AMOUNT_MILLI_COIN() {
      return -3;
    },
    /*utils$.AMOUNT_MICRO_COIN*/get AMOUNT_MICRO_COIN() {
      return -6;
    },
    /*utils$.AMOUNT_ATOM*/get AMOUNT_ATOM() {
      return -8;
    }
  }, true);
  dart.trackLibraries("packages/bitcoins/txrules/txrules.dart", {
    "package:bitcoins/txrules/txrules.dart": txrules,
    "package:bitcoins/wallet/wallet.dart": wallet,
    "package:bitcoins/txhelpers/txhelpers.dart": txhelpers,
    "package:bitcoins/helpers/helpers.dart": helpers,
    "package:bitcoins/txsizes/txsizes.dart": txsizes,
    "package:bitcoins/hdkeychain/hdkeychain.dart": hdkeychain,
    "package:bitcoins/txscript/txscript.dart": txscript,
    "package:bitcoins/transaction/transaction.dart": transaction,
    "package:bitcoins/chainhash/chainhash.dart": chainhash,
    "package:bitcoins/base58check/base58check.dart": base58check,
    "package:bitcoins/utils/utils.dart": utils$
  }, {
    "package:bitcoins/txrules/txrules.dart": ["rules.dart"],
    "package:bitcoins/wallet/wallet.dart": ["address_info.dart", "address_manager.dart", "account_data.dart", "address_buffer.dart", "default_account_cache.dart", "account_cache.dart", "account_properties.dart", "wallet_btc.dart"],
    "package:bitcoins/txhelpers/txhelpers.dart": ["output.dart", "change_source.dart", "p2pkh_change_source.dart", "transaction_destination.dart"],
    "package:bitcoins/txsizes/txsizes.dart": ["size.dart"],
    "package:bitcoins/hdkeychain/hdkeychain.dart": ["crypto.dart", "extend_key.dart"],
    "package:bitcoins/txscript/txscript.dart": ["parsed_opcode.dart", "op_code.dart", "script.dart", "standard.dart", "script_builder.dart", "sig_hash.dart", "key_closure.dart", "script_closure.dart", "tx_sig_hashes.dart", "sign.dart"],
    "package:bitcoins/transaction/transaction.dart": ["common.dart", "utxo.dart", "tx_in.dart", "tx_out.dart", "out_point.dart", "input_source.dart", "input_detail.dart", "store.dart", "msg_tx.dart", "author_tx.dart"],
    "package:bitcoins/chainhash/chainhash.dart": ["./hash.dart", "./hashfuncs.dart"],
    "package:bitcoins/utils/utils.dart": ["./amount.dart", "./address.dart", "./address_script_hash.dart", "./address_witness_pub_key_hash.dart", "./address_pub_key_hash.dart", "./numbers.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["rules.dart","../wallet/address_info.dart","../wallet/address_manager.dart","../wallet/account_data.dart","../wallet/address_buffer.dart","../wallet/default_account_cache.dart","../wallet/account_cache.dart","../wallet/account_properties.dart","../wallet/wallet_btc.dart","../txhelpers/change_source.dart","../txhelpers/p2pkh_change_source.dart","../txhelpers/transaction_destination.dart","../txhelpers/output.dart","../helpers/helpers.dart","../txsizes/size.dart","../hdkeychain/extend_key.dart","../hdkeychain/crypto.dart","../txscript/parsed_opcode.dart","../txscript/op_code.dart","../txscript/script_builder.dart","../txscript/key_closure.dart","../txscript/script_closure.dart","../txscript/tx_sig_hashes.dart","../txscript/script.dart","../txscript/sig_hash.dart","../txscript/sign.dart","../txscript/standard.dart","../transaction/utxo.dart","../transaction/tx_in.dart","../transaction/tx_out.dart","../transaction/out_point.dart","../transaction/input_source.dart","../transaction/input_detail.dart","../transaction/store.dart","../transaction/msg_tx.dart","../transaction/author_tx.dart","../transaction/common.dart","../chainhash/hash.dart","../chainhash/hashfuncs.dart","../base58check/base58check.dart","../utils/amount.dart","../utils/address.dart","../utils/address_script_hash.dart","../utils/address_witness_pub_key_hash.dart","../utils/address_pub_key_hash.dart","../utils/numbers.dart"],"names":[],"mappings":"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EF,oBACE,UAEA,2CAEF,oBACE,UAEA,2CAEF,oBACE,UAED,2CAED,mBACE,UAEF,2CAEA,kBACE,UAEF,2CAEA,kBACE,UAED,2CAED,mBACE,UAED,2CAED,mBACE,UAED,2CAED,mBACE,UAEF,2CAEA,kBACE,UAED,2CAED,mBACE,UAED,2CAED,mBACE,UAIF,2CAEA,kBACE,UAEC,2CAEH,qBACE,UAED,2CAED,mBACE,UAEA,2CAEF,oBACE,UAED,2CAED,mBACE,UAIC,2CAEH,qBACE,UAEF,2CAEA,kBACE,UAEH,2CAEC,iBACE,UAEF,2CAEA,kBACE,UAEA,2CAEF,oBACE,UAEM,2CAER,0BACE,UAEI,2CAEN,wBACE,UAEI,2CAEN,wBACE,UAID,2CAED,mBACE,UAED,2CAED,mBACE,UAED,2CAED,mBACE,UAED,2CAED,mBACE,UAEC,2CAEH,qBACE,UAEF,2CAEA,kBACE,UAEF,2CAEA,kBACE,UAEI,2CAEN,wBACE,UAEF,2CAEA,kBACE,UAEF,2CAEA,kBACE,UAEF,2CAEA,kBACE,UAEF,2CAEA,kBACE,UAEF,2CAEA,kBACE,UAEC,2CAEH,qBACE,UAEC,2CAEH,qBACE,UAEE,2CAEJ,sBACE,UAEC,2CAEH,qBACE,UAEG,2CAEL,uBACE,UAES,2CAEX,6BACE,UAEM,2CAER,0BACE,UAEG,2CAEL,uBACE,UAEM,2CAER,0BACE,UAEU,2CAEZ,8BACE,UAEa,2CAEf,iCACE,UAEF,2CAEA,kBACE,UAEF,2CAEA,kBACE,UAEC,2CAEH,qBACE,UAII,2CAEN,wBACE,UAED,2CAED,mBACE,UAEC,2CAEH,qBACE,UAEE,2CAEJ,sBACE,UAEE,2CAEJ,sBACE,UAEQ,2CAEV,4BACE,UAEG,2CAEL,uBACE,UAES,2CAEX,6BACE,UAEQ,2CAEV,4BACE,UAEc,2CAEhB,kCACE,UAID,2CAED,mBACE,UAED,2CAED,mBACE,UAED,2CAED,mBACE,UAED,2CAED,mBACE,UAED,2CAED,mBACE,UAED,2CAED,mBACE,UAED,2CAED,mBACE,UAEA,2CAEF,oBACE,UAIK,2CAEP,yBACE,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","file":"../../../../../../../../../E:/packages/bitcoins/txrules/txrules.dart.lib.js"}');
  // Exports:
  return {
    txrules__txrules: txrules,
    wallet__wallet: wallet,
    txhelpers__txhelpers: txhelpers,
    helpers__helpers: helpers,
    txsizes__txsizes: txsizes,
    hdkeychain__hdkeychain: hdkeychain,
    txscript__txscript: txscript,
    transaction__transaction: transaction,
    chainhash__chainhash: chainhash,
    base58check__base58check: base58check,
    utils__utils: utils$
  };
}));

//# sourceMappingURL=txrules.dart.lib.js.map
