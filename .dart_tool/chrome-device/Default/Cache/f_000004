define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart', 'packages/plaid_flutter/src/plaid_js_map.dart'], (function load__packages__plaid_flutter__plaid_flutter_web_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart, packages__plaid_flutter__src__plaid_js_map$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const plaid_js_map = packages__plaid_flutter__src__plaid_js_map$46dart.src__plaid_js_map;
  var plaid_flutter_web = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    StringAnddynamicTovoid: () => (T.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    dynamicAnddynamicTovoid: () => (T.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[1] || CT.C1
      });
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/plaid_flutter-2.1.3/lib/plaid_flutter_web.dart",
    "package:plaid_flutter/plaid_flutter_web.dart"
  ];
  var _channel$ = dart.privateName(plaid_flutter_web, "_channel");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  plaid_flutter_web.PlaidFlutterPlugin = class PlaidFlutterPlugin extends core.Object {
    static registerWith(registrar) {
      if (registrar == null) dart.nullFailed(I[0], 22, 38, "registrar");
      let channel = new platform_channel.MethodChannel.new("plugins.flutter.io/plaid_flutter", C[0] || CT.C0, registrar);
      new plaid_flutter_web.PlaidFlutterPlugin.new(channel);
    }
    handleMethodCall(call) {
      if (call == null) dart.nullFailed(I[0], 33, 47, "call");
      return async.async(dart.dynamic, (function* handleMethodCall() {
        switch (call.method) {
          case "open":
          {
            return this.open(core.Map.as(call.arguments));
          }
          case "close":
          {
            return this.close();
          }
          default:
          {
            dart.throw(new message_codec.PlatformException.new({code: "Unimplemented", details: "plaid_flutter for web doesn't implement '" + dart.str(call.method) + "'"}));
          }
        }
      }).bind(this));
    }
    open($arguments) {
      if ($arguments == null) dart.nullFailed(I[0], 48, 35, "arguments");
      let token = T.StringN().as($arguments[$_get]("token"));
      let publicKey = T.StringN().as($arguments[$_get]("publicKey"));
      let clientName = T.StringN().as($arguments[$_get]("clientName"));
      let environment = T.StringN().as($arguments[$_get]("environment"));
      let linkCustomizationName = T.StringN().as($arguments[$_get]("linkCustomizationName"));
      let language = T.StringN().as($arguments[$_get]("language") == null ? "en" : $arguments[$_get]("language"));
      let webhook = T.StringN().as($arguments[$_get]("webhook"));
      let userLegalName = T.StringN().as($arguments[$_get]("userLegalName"));
      let userEmailAddress = T.StringN().as($arguments[$_get]("userEmailAddress"));
      let userPhoneNumber = T.StringN().as($arguments[$_get]("userPhoneNumber"));
      let oauthNonce = T.StringN().as($arguments[$_get]("oauthNonce"));
      let oauthRedirectUri = T.StringN().as($arguments[$_get]("oauthRedirectUri"));
      let countryCodes = $arguments[$_get]("countryCodes") == null ? T.JSArrayOfString().of([""]) : T.ListOfString().from(core.Iterable.as($arguments[$_get]("countryCodes")));
      let products = $arguments[$_get]("products") == null ? T.JSArrayOfString().of([""]) : T.ListOfString().from(core.Iterable.as($arguments[$_get]("products")));
      let options = {clientName: clientName, token: token, key: publicKey, env: environment, product: products, countryCodes: countryCodes, webhook: webhook, linkCustomizationName: linkCustomizationName, language: language, oauthNonce: oauthNonce, oauthRedirectUri: oauthRedirectUri, userLegalName: userLegalName, userEmailAddress: userEmailAddress, userPhoneNumber: userPhoneNumber, onEvent: js.allowInterop(T.StringAnddynamicTovoid(), dart.fn((event, metadata) => {
          if (event == null) dart.nullFailed(I[0], 84, 30, "event");
          let $arguments = new (T.IdentityMapOfString$dynamic()).from(["event", event, "metadata", this.mapFromEventMetadata(plaid_js_map.jsToMap(metadata))]);
          this[_channel$].invokeMethod(dart.dynamic, "onEvent", $arguments);
        }, T.StringAnddynamicTovoid())), onSuccess: js.allowInterop(T.StringAnddynamicTovoid(), dart.fn((publicToken, metadata) => {
          if (publicToken == null) dart.nullFailed(I[0], 91, 32, "publicToken");
          let $arguments = new (T.IdentityMapOfString$dynamic()).from(["publicToken", publicToken, "metadata", this.mapFromSuccessMetadata(plaid_js_map.jsToMap(metadata))]);
          this[_channel$].invokeMethod(dart.dynamic, "onSuccess", $arguments);
        }, T.StringAnddynamicTovoid())), onExit: js.allowInterop(T.dynamicAnddynamicTovoid(), dart.fn((error, metadata) => {
          let $arguments = new (T.IdentityMapOfString$dynamic()).from(["metadata", this.mapFromExitMetadata(plaid_js_map.jsToMap(metadata))]);
          if (error != null) {
            $arguments[$_set]("error", this.mapFromError(plaid_js_map.jsToMap(error)));
          }
          this[_channel$].invokeMethod(dart.dynamic, "onExit", $arguments);
        }, T.dynamicAnddynamicTovoid())), onLoad: js.allowInterop(T.VoidTovoid(), dart.fn(() => {
        }, T.VoidTovoid()))};
      dart.global.Plaid.create(options).open();
    }
    close() {
    }
    mapFromError(data) {
      let t0, t0$, t0$0, t0$1;
      if (data == null) dart.nullFailed(I[0], 117, 59, "data");
      let result = new (T.IdentityMapOfString$dynamic()).new();
      result[$_set]("errorType", (t0 = data[$_get]("error_type"), t0 == null ? "" : t0));
      result[$_set]("errorCode", (t0$ = data[$_get]("error_code"), t0$ == null ? "" : t0$));
      result[$_set]("errorMessage", (t0$0 = data[$_get]("error_message"), t0$0 == null ? "" : t0$0));
      result[$_set]("errorType", (t0$1 = data[$_get]("error_type"), t0$1 == null ? "" : t0$1));
      return result;
    }
    mapFromSuccessMetadata(data) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6;
      if (data == null) dart.nullFailed(I[0], 128, 69, "data");
      let result = new (T.IdentityMapOfString$dynamic()).new();
      let institutionMap = plaid_js_map.jsToMap(data[$_get]("institution"));
      result[$_set]("institution", new (T.IdentityMapOfString$dynamic()).from(["id", (t0 = institutionMap[$_get]("institution_id"), t0 == null ? "" : t0), "name", (t0$ = institutionMap[$_get]("name"), t0$ == null ? "" : t0$)]));
      result[$_set]("linkSessionId", (t0$0 = data[$_get]("link_session_id"), t0$0 == null ? "" : t0$0));
      let accountsList = [];
      for (let item of core.Iterable.as(data[$_get]("accounts"))) {
        let accountMap = plaid_js_map.jsToMap(item);
        let account = new (T.IdentityMapOfString$dynamic()).new();
        account[$_set]("id", (t0$1 = accountMap[$_get]("id"), t0$1 == null ? "" : t0$1));
        account[$_set]("mask", (t0$2 = accountMap[$_get]("mask"), t0$2 == null ? "" : t0$2));
        account[$_set]("name", (t0$3 = accountMap[$_get]("name"), t0$3 == null ? "" : t0$3));
        account[$_set]("type", (t0$4 = accountMap[$_get]("type"), t0$4 == null ? "" : t0$4));
        account[$_set]("subtype", (t0$5 = accountMap[$_get]("subtype"), t0$5 == null ? "" : t0$5));
        account[$_set]("verificationStatus", (t0$6 = accountMap[$_get]("verification_status"), t0$6 == null ? "" : t0$6));
        accountsList[$add](account);
      }
      result[$_set]("accounts", accountsList);
      return result;
    }
    mapFromExitMetadata(data) {
      let t0, t0$, t0$0, t0$1, t0$2;
      if (data == null) dart.nullFailed(I[0], 160, 66, "data");
      let result = new (T.IdentityMapOfString$dynamic()).new();
      let institutionMap = plaid_js_map.jsToMap(data[$_get]("institution"));
      result[$_set]("institution", new (T.IdentityMapOfString$dynamic()).from(["id", (t0 = institutionMap[$_get]("institution_id"), t0 == null ? "" : t0), "name", (t0$ = institutionMap[$_get]("name"), t0$ == null ? "" : t0$)]));
      result[$_set]("requestId", (t0$0 = data[$_get]("request_id"), t0$0 == null ? "" : t0$0));
      result[$_set]("linkSessionId", (t0$1 = data[$_get]("link_session_id"), t0$1 == null ? "" : t0$1));
      result[$_set]("status", (t0$2 = data[$_get]("status"), t0$2 == null ? "" : t0$2));
      return result;
    }
    mapFromEventMetadata(data) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9;
      if (data == null) dart.nullFailed(I[0], 176, 67, "data");
      let result = new (T.IdentityMapOfString$dynamic()).new();
      result[$_set]("errorCode", (t0 = data[$_get]("error_code"), t0 == null ? "" : t0));
      result[$_set]("errorMessage", (t0$ = data[$_get]("error_message"), t0$ == null ? "" : t0$));
      result[$_set]("errorType", (t0$0 = data[$_get]("error_type"), t0$0 == null ? "" : t0$0));
      result[$_set]("exitStatus", (t0$1 = data[$_get]("exit_status"), t0$1 == null ? "" : t0$1));
      result[$_set]("institutionSearchQuery", (t0$2 = data[$_get]("institution_search_query"), t0$2 == null ? "" : t0$2));
      result[$_set]("institutionName", (t0$3 = data[$_get]("institution_name"), t0$3 == null ? "" : t0$3));
      result[$_set]("institutionId", (t0$4 = data[$_get]("institution_id"), t0$4 == null ? "" : t0$4));
      result[$_set]("linkSessionId", (t0$5 = data[$_get]("link_session_id"), t0$5 == null ? "" : t0$5));
      result[$_set]("mfaType", (t0$6 = data[$_get]("mfa_type"), t0$6 == null ? "" : t0$6));
      result[$_set]("viewName", (t0$7 = data[$_get]("view_name"), t0$7 == null ? "" : t0$7));
      result[$_set]("requestId", (t0$8 = data[$_get]("request_id"), t0$8 == null ? "" : t0$8));
      result[$_set]("timestamp", (t0$9 = data[$_get]("timestamp"), t0$9 == null ? "" : t0$9));
      return result;
    }
  };
  (plaid_flutter_web.PlaidFlutterPlugin.new = function(_channel) {
    if (_channel == null) dart.nullFailed(I[0], 18, 27, "_channel");
    this[_channel$] = _channel;
    this[_channel$].setMethodCallHandler(dart.bind(this, 'handleMethodCall'));
  }).prototype = plaid_flutter_web.PlaidFlutterPlugin.prototype;
  dart.addTypeTests(plaid_flutter_web.PlaidFlutterPlugin);
  dart.addTypeCaches(plaid_flutter_web.PlaidFlutterPlugin);
  dart.setMethodSignature(plaid_flutter_web.PlaidFlutterPlugin, () => ({
    __proto__: dart.getMethods(plaid_flutter_web.PlaidFlutterPlugin.__proto__),
    handleMethodCall: dart.fnType(async.Future, [message_codec.MethodCall]),
    open: dart.fnType(dart.void, [core.Map]),
    close: dart.fnType(dart.void, []),
    mapFromError: dart.fnType(core.Map$(core.String, dart.dynamic), [core.Map]),
    mapFromSuccessMetadata: dart.fnType(core.Map$(core.String, dart.dynamic), [core.Map]),
    mapFromExitMetadata: dart.fnType(core.Map$(core.String, dart.dynamic), [core.Map]),
    mapFromEventMetadata: dart.fnType(core.Map$(core.String, dart.dynamic), [core.Map])
  }));
  dart.setLibraryUri(plaid_flutter_web.PlaidFlutterPlugin, I[1]);
  dart.setFieldSignature(plaid_flutter_web.PlaidFlutterPlugin, () => ({
    __proto__: dart.getFields(plaid_flutter_web.PlaidFlutterPlugin.__proto__),
    [_channel$]: dart.finalFieldType(platform_channel.MethodChannel)
  }));
  dart.trackLibraries("packages/plaid_flutter/plaid_flutter_web.dart", {
    "package:plaid_flutter/plaid_flutter_web.dart": plaid_flutter_web
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["plaid_flutter_web.dart"],"names":[],"mappings":"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","file":"../../../../../../../../E:/packages/plaid_flutter/plaid_flutter_web.dart.lib.js"}');
  // Exports:
  return {
    plaid_flutter_web: plaid_flutter_web
  };
}));

//# sourceMappingURL=plaid_flutter_web.dart.lib.js.map
